

======================================
저장한 시간: 2025-04-08 오후 3:57:12 화요일
======================================

// ------------------------------------------------------------
//  - 4 / 8 -
// ------------------------------------------------------------
// 중간고사(30) 4/24 목
// 과제(30) 4/10 과제설명
// ------------------------------------------------------------
// class STRING - STL 정식 컨테이너처럼 동작하는 자료구조
// ------------------------------------------------------------

/*
oop -> 특정 타입을위한 코딩
generic -> 타입과 관련없는 코딩
*/

#include <iostream>
#include <memory>
#include "STRING.h"

#include "save.h"
using namespace std;



//--------
int main()
//--------
{
	STRING s{ "std::string과 유사한 클래스" };

	STRING t; //디폴트 생성자를 코딩하게 되면 프로그램이 기본 생성자를 만들어 주지 않는다

	t = s; //스페셜한 동작인데 컴파일러가 무조건 만들어 주어야 하지만 유니크 포인터는 이를 해주지 않는다

	save("main.cpp");
}

======================================
저장한 시간: 2025-04-08 오후 3:57:31 화요일
======================================

// ------------------------------------------------------------
//  - 4 / 8 -
// ------------------------------------------------------------
// 중간고사(30) 4/24 목
// 과제(30) 4/10 과제설명
// ------------------------------------------------------------
// class STRING - STL 정식 컨테이너처럼 동작하는 자료구조
// ------------------------------------------------------------

/*
oop -> 특정 타입을위한 코딩
generic -> 타입과 관련없는 코딩
*/

#include <iostream>
#include <memory>
#include "STRING.h"

#include "save.h"
using namespace std;



//--------
int main()
//--------
{
	STRING s{ "std::string과 유사한 클래스" };

	STRING t; //디폴트 생성자를 코딩하게 되면 프로그램이 기본 생성자를 만들어 주지 않는다

	t = s; //스페셜한 동작인데 컴파일러가 무조건 만들어 주어야 하지만 유니크 포인터는 이를 해주지 않는다

	save("main.cpp");
	save("STRING.cpp");
	save("STRING.h");
}

======================================
저장한 시간: 2025-04-08 오후 3:57:31 화요일
======================================

//-----------------------------------------------------
//STRING.cpp - std::string 과 유사한 클래스
//           stl의 표준 컨테이너로서 동작 할 수 있도록
//
//-----------------------------------------------------

#include <iostream>
#include <memory>
#include"STRING.h"



STRING::STRING(const char* s) 
	: len{ strlen(s) } 
{
		p.reset();
		p = std::make_unique<char[]>(len);
		memcpy(p.get(), s, len);
}

STRING::STRING(const STRING& other) 
	: len{ other.len } 
{
		p.reset();
		p = std::make_unique<char[]>(len);
		memcpy(p.get(), other.p.get(), len);
}

STRING& STRING::operator=(const STRING& other) 
{
	if (this == &other)
		return *this;

	len = other.len;
	p.release();
	p = std::make_unique<char[]>(len);
	memcpy(p.get(), other.p.get(), len);
	return *this;
}

	

size_t STRING::size() const 
{ 
	return len;
}



std::ostream& operator<<(std::ostream& os, const STRING& str) {
	for (int i = 0; i < str.len; ++i) {
		os << str.p[i];
	}
	return os;
}


======================================
저장한 시간: 2025-04-08 오후 3:57:31 화요일
======================================

//-----------------------------------------------------
//STRING.h - std::string 과 유사한 클래스
//           stl의 동작을 깊게 들여다 보기 위해
//
//-----------------------------------------------------

#pragma once

#include <iostream>
#include <memory>

//표준 std::string 과 유사한 동작을 하는 클래스
class STRING {
public:

	
	STRING() = default;
	STRING(const char* s);
	STRING& operator=(const STRING&);
	STRING(const STRING& other);

	//copy assignment operator 복사대입 연산자를 반드시 코딩

	size_t size() const;

private:
	size_t len;
	std::unique_ptr<char[]> p; //복사가 안되는 클래스

	friend std::ostream& operator<<(std::ostream& os, const STRING& str);
};



======================================
저장한 시간: 2025-04-08 오후 4:29:23 화요일
======================================

// ------------------------------------------------------------
//  - 4 / 8 -
// ------------------------------------------------------------
// 중간고사(30) 4/24 목
// 과제(30) 4/10 과제설명
// ------------------------------------------------------------
// class STRING - STL 정식 컨테이너처럼 동작하는 자료구조
// ------------------------------------------------------------

/*
oop -> 특정 타입을위한 코딩
generic -> 타입과 관련없는 코딩
*/

#include <iostream>
#include <memory>
#include "STRING.h"

#include "save.h"
using namespace std;

extern bool 관찰;                  //관찰하고 싶으면 true 로

STRING s{ "이제 준비가 되었다" };
//--------
int main()
//--------
{
	관찰 = true;
	cout << "메인시작" << endl;

	new STRING{"1234567"};

	STRING t;

	t = s;

	cout << "메인 끝" << endl;

	

	save("main.cpp");
}

======================================
저장한 시간: 2025-04-08 오후 4:34:41 화요일
======================================

// ------------------------------------------------------------
//  - 4 / 8 -
// ------------------------------------------------------------
// 중간고사(30) 4/24 목
// 과제(30) 4/10 과제설명
// ------------------------------------------------------------
// class STRING - STL 정식 컨테이너처럼 동작하는 자료구조
// ------------------------------------------------------------

/*
oop -> 특정 타입을위한 코딩
generic -> 타입과 관련없는 코딩
*/

#include <iostream>
#include<array>
#include <memory>
#include "STRING.h"

#include "save.h"
using namespace std;

extern bool 관찰;                  //관찰하고 싶으면 true 로

//--------
int main()
//--------
{
	array<STRING, 5> a{ "1" ,"333" , "55555" , "22" , "4444" };

	for (STRING s : a) {
		cout << s << endl;
	}

	save("main.cpp");
}

======================================
저장한 시간: 2025-04-08 오후 4:35:18 화요일
======================================

// ------------------------------------------------------------
//  - 4 / 8 -
// ------------------------------------------------------------
// 중간고사(30) 4/24 목
// 과제(30) 4/10 과제설명
// ------------------------------------------------------------
// class STRING - STL 정식 컨테이너처럼 동작하는 자료구조
// ------------------------------------------------------------

/*
oop -> 특정 타입을위한 코딩
generic -> 타입과 관련없는 코딩
*/

#include <iostream>
#include<array>
#include <memory>
#include "STRING.h"

#include "save.h"
using namespace std;

extern bool 관찰;                  //관찰하고 싶으면 true 로

//--------
int main()
//--------
{
	array<STRING, 5> a{ "1" ,"333" , "55555" , "22" , "4444" };

	관찰 = true;
	for (STRING s : a) {
		cout << s << endl;
	}

	save("main.cpp");
}

======================================
저장한 시간: 2025-04-08 오후 4:37:02 화요일
======================================

// ------------------------------------------------------------
//  - 4 / 8 -
// ------------------------------------------------------------
// 중간고사(30) 4/24 목
// 과제(30) 4/10 과제설명
// ------------------------------------------------------------
// class STRING - STL 정식 컨테이너처럼 동작하는 자료구조
// ------------------------------------------------------------

/*
oop -> 특정 타입을위한 코딩
generic -> 타입과 관련없는 코딩
*/

#include <iostream>
#include<array>
#include <memory>
#include "STRING.h"

#include "save.h"
using namespace std;

extern bool 관찰;                  //관찰하고 싶으면 true 로

//--------
int main()
//--------
{
	array<STRING, 5> a{ "1" ,"333" , "55555" , "22" , "4444" };

	관찰 = true;
	for (const STRING& s : a) {
		cout << s << endl;
	}
	//아무데나 auto를 사용하지 말아라
	save("main.cpp");
}

======================================
저장한 시간: 2025-04-08 오후 4:56:48 화요일
======================================

// ------------------------------------------------------------
//  - 4 / 8 -
// ------------------------------------------------------------
// 중간고사(30) 4/24 목
// 과제(30) 4/10 과제설명
// ------------------------------------------------------------
// class STRING - STL 정식 컨테이너처럼 동작하는 자료구조
// ------------------------------------------------------------

/*
oop -> 특정 타입을위한 코딩
generic -> 타입과 관련없는 코딩
*/

#include <iostream>
#include<array>
#include <memory>
#include<algorithm>
#include "STRING.h"

#include "save.h"
using namespace std;

extern bool 관찰;                  //관찰하고 싶으면 true 로

//--------
int main()
//--------
{
	array<STRING, 5> a{ "1" ,"333" , "55555" , "22" , "4444" };

	//문제 a를 글자 길이 기준 오름차순으로 정렬하시오

	관찰 = 1;
	sort(a.begin(), a.end(), [](const STRING& a, const STRING& b) {return a.size() > b.size(); });
	관찰 = 0;
	for (const STRING& s : a) {
		cout << s << endl;
	}
	
	
	save("main.cpp");
}

======================================
저장한 시간: 2025-04-08 오후 5:16:42 화요일
======================================

// ------------------------------------------------------------
//  - 4 / 8 -
// ------------------------------------------------------------
// 중간고사(30) 4/24 목
// 과제(30) 4/10 과제설명
// ------------------------------------------------------------
// class STRING - STL 정식 컨테이너처럼 동작하는 자료구조
// ------------------------------------------------------------

/*
oop -> 특정 타입을위한 코딩
generic -> 타입과 관련없는 코딩
*/

#include <iostream>
#include<array>
#include <memory>
#include<algorithm>
#include "STRING.h"

#include "save.h"
using namespace std;

extern bool 관찰;                  //관찰하고 싶으면 true 로

//--------
int main()
//--------
{
	array<STRING, 5> a{ "1" ,"333" , "55555" , "22" , "4444" };

	//문제 a를 글자 길이 기준 오름차순으로 정렬하시오

	관찰 = 1;
	sort(a.begin(), a.end(), [](const STRING& a, const STRING& b) {return a.size() > b.size(); });
	관찰 = 0;
	for (const STRING& s : a) {
		cout << s << endl;
	}
	
	//개수가 늘어날 수록 이전과 큰 차이가 난다
	save("main.cpp");
	save("STRING.cpp");
}

======================================
저장한 시간: 2025-04-08 오후 5:16:42 화요일
======================================

//-----------------------------------------------------
//STRING.cpp - std::string 과 유사한 클래스
//           stl의 표준 컨테이너로서 동작 할 수 있도록
//                                          20254.8
//-----------------------------------------------------

#include <iostream>
#include <memory>
#include <print>

#include"STRING.h"

bool 관찰{ false };

STRING::STRING() 
	: id{ ++gid }
{
	if (관찰) {
		std::println("[{:8}] - {:<20} 자원수:{:<6} 주소:{:>16}, 자원의 주소:{:>16}",
			id, "default 생성자", len, (void*)this, (void*)p.get());
	}
}

STRING::~STRING()
{
	if (관찰) {
		std::println("[{:8}] - {:<20} 자원수:{:<6} 주소:{:>16}, 자원의 주소:{:>16}",
			id, "소멸자", len, (void*)this, (void*)p.get());
	}
}

STRING::STRING(const char* s) 
	: id{++gid} ,len {strlen(s)}
{
		p.reset();
		p = std::make_unique<char[]>(len);
		memcpy(p.get(), s, len);

		if(관찰){
			std::println("[{:8}] - {:<20} 자원수:{:<6} 주소:{:>16}, 자원의 주소:{:>16}",
				id, "생성자(char*)", len, (void*)this, (void*)p.get());
		}
}

STRING::STRING(const STRING& other) 
	: id{ ++gid }, len{ other.len }
{
		p.reset();
		p = std::make_unique<char[]>(len);
		memcpy(p.get(), other.p.get(), len);

		if (관찰) {
			std::println("[{:8}] - {:<20} 자원수:{:<6} 주소:{:>16}, 자원의 주소:{:>16}",
				id, "복사 생성자", len, (void*)this, (void*)p.get());
		}
}

STRING& STRING::operator=(const STRING& other) 
{
	if (this == &other)
		return *this;

	len = other.len;
	p.release();
	p = std::make_unique<char[]>(len);
	memcpy(p.get(), other.p.get(), len);

	if (관찰) {
		std::println("[{:8}] - {:<20} 자원수:{:<6} 주소:{:>16}, 자원의 주소:{:>16}",
			id, "복사할당연산자", len, (void*)this, (void*)p.get());
	}

	return *this;
}

STRING::STRING(STRING&& other)
	:id{++gid}, len{other.len }
{
	p.reset(other.p.get());
	other.p.release(); //필요없지만 안전을 위해 // 무효과
	
	if (관찰) {
		std::println("[{:8}] - {:<20} 자원수:{:<6} 주소:{:>16}, 자원의 주소:{:>16}",
			id, "이동 생성자", len, (void*)this, (void*)p.get());
	}
}

STRING& STRING::operator=(STRING&& other) 
{
	if (this == &other)
		return *this;

	len = other.len;
	p.reset(other.p.get());
	other.p.release(); //필요없지만 안전을 위해 // 무효과

	if (관찰) {
		std::println("[{:8}] - {:<20} 자원수:{:<6} 주소:{:>16}, 자원의 주소:{:>16}",
			id, "이동 operator=", len, (void*)this, (void*)p.get());
	}
	return *this;
}

size_t STRING::size() const 
{ 
	return len;
}

std::ostream& operator<<(std::ostream& os, const STRING& str) {
	for (int i = 0; i < str.len; ++i) {
		os << str.p[i];
	}
	return os;
}

size_t STRING::gid{ 0 };


======================================
저장한 시간: 2025-04-10 오전 11:06:18 목요일
======================================

// ------------------------------------------------------------
//  - 4 / 10 -
// ------------------------------------------------------------
// 중간고사(30) 4/24 목
// 과제(30) 4/10 과제설명
// ------------------------------------------------------------
// class STRING - STL 정식 컨테이너처럼 동작하는 자료구조
// ------------------------------------------------------------

/*
oop -> 특정 타입을위한 코딩
generic -> 타입과 관련없는 코딩
*/

#include <iostream>
#include<array>
#include <memory>
#include<algorithm>
#include "STRING.h"

#include "save.h"
using namespace std;

extern bool 관찰;             //관찰하고 싶으면 true 로

//--------
int main()
//--------
{
	관찰 = 1;
	STRING s{ "이동될 문자열" };
	STRING t = move(s);

	cout << s << endl;//xvalue(만료된 값)을 사용하는 코드의 결과는 정의되어 있지x
	cout << t << endl;
	
	save("main.cpp");
}

======================================
저장한 시간: 2025-04-10 오전 11:40:59 목요일
======================================

//-----------------------------------------------------
//STRING.cpp - std::string 과 유사한 클래스
//           stl의 표준 컨테이너로서 동작 할 수 있도록
//                                          20254.8
//-----------------------------------------------------

#include <iostream>
#include <memory>
#include <print>

#include"STRING.h"

bool 관찰{ false };

STRING::STRING() 
	: id{ ++gid }, len{0}
{
	if (관찰) {
		std::println("[{:8}] - {:<20} 자원수:{:<6} 주소:{:>16}, 자원의 주소:{:>16}",
			id, "default 생성자", len, (void*)this, (void*)p.get());
	}
}

STRING::~STRING()
{
	if (관찰) {
		std::println("[{:8}] - {:<20} 자원수:{:<6} 주소:{:>16}, 자원의 주소:{:>16}",
			id, "소멸자", len, (void*)this, (void*)p.get());
	}
}

STRING::STRING(const char* s) 
	: id{++gid} ,len {strlen(s)}
{
		p.reset();
		p = std::make_unique<char[]>(len);
		memcpy(p.get(), s, len);

		if(관찰){
			std::println("[{:8}] - {:<20} 자원수:{:<6} 주소:{:>16}, 자원의 주소:{:>16}",
				id, "생성자(char*)", len, (void*)this, (void*)p.get());
		}
}

//복사생성과 복사할당연산자
STRING::STRING(const STRING& other) 
	: id{ ++gid }, len{ other.len }
{
		p.reset();
		p = std::make_unique<char[]>(len);
		memcpy(p.get(), other.p.get(), len);

		if (관찰) {
			std::println("[{:8}] - {:<20} 자원수:{:<6} 주소:{:>16}, 자원의 주소:{:>16}",
				id, "복사 생성자", len, (void*)this, (void*)p.get());
		}
}

STRING& STRING::operator=(const STRING& other) 
{
	if (this == &other)
		return *this;

	len = other.len;
	p.release();
	p = std::make_unique<char[]>(len);
	memcpy(p.get(), other.p.get(), len);

	if (관찰) {
		std::println("[{:8}] - {:<20} 자원수:{:<6} 주소:{:>16}, 자원의 주소:{:>16}",
			id, "복사할당연산자", len, (void*)this, (void*)p.get());
	}

	return *this;
}

//이동생성과 이동할당연산자 
STRING::STRING(STRING&& other)
	:id{++gid}, len{other.len }
{
	p.reset(other.p.get());
	other.len = 0;

	//*this = other;

	other.p.release(); //필요없지만 안전을 위해 // 무효과
	
	if (관찰) {
		std::println("[{:8}] - {:<20} 자원수:{:<6} 주소:{:>16}, 자원의 주소:{:>16}",
			id, "이동 생성자", len, (void*)this, (void*)p.get());
	}
}

STRING& STRING::operator=(STRING&& other) 
{
	if (this == &other)
		return *this;

	len = other.len;
	p.reset(other.p.get());
	other.len = 0;

	if (관찰) {
		std::println("[{:8}] - {:<20} 자원수:{:<6} 주소:{:>16}, 자원의 주소:{:>16}",
			id, "이동 operator=", len, (void*)this, (void*)p.get());
	}
	return *this;
}

size_t STRING::size() const 
{ 
	return len;
}

std::ostream& operator<<(std::ostream& os, const STRING& str) {
	for (int i = 0; i < str.len; ++i) {
		os << str.p[i];
	}
	return os;
}

std::istream& operator>>(std::istream& is, STRING& str) {
	
	std::string s;
	is >> s;

	str.p.release();
	str.p = std::make_unique<char[]>(s.size());
	str.len = s.size();
	memcpy(str.p.get(), s.data(), str.len);

	return is;
}

size_t STRING::gid{ 0 };
