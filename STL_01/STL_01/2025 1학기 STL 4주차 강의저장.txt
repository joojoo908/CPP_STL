

======================================
저장한 시간: 2025-03-25 오후 3:38:50 화요일
======================================

// ------------------------------------------------------------
//  - 3 / 20 -
// ------------------------------------------------------------
// 동적 할당과 스마트 포인터
// ------------------------------------------------------------

#include <iostream>
#include <vector>
#include <numeric>

#include "save.h"
using namespace std;



//--------
int main()
//--------
{ 
	save("main.cpp");

	// 문제 : 양의 정수 num(int 의 max 값까진 받자)을 입력 받아라
	// num 개 만큼 int를 저장할 메모리를 확보하라
	//메모리의 내용을 1부터 시작하는 정수로 채워라
	// 메모리에 저장한 int 값의 합계를 출력하라
	// 이 과정을 영원히 반복하라


	while (true) {
		cout << "값을 입력하세요" << endl;
		int num;
		cin >> num;

		vector<int> v(num);
		iota(v.begin(), v.end(), 1);



		cout << "1부터 " << num << " 까지의 합계는 - " << accumulate(v.begin(), v.end(), 0) << endl;
	}

}

======================================
저장한 시간: 2025-03-25 오후 4:06:17 화요일
======================================

// ------------------------------------------------------------
//  - 3 / 20 -
// ------------------------------------------------------------
// 동적(real-time(돌려봐야 알 수 있는)) 할당과 스마트 포인터
// ------------------------------------------------------------

#include <iostream>
#include <vector>
#include <numeric>

#include "save.h"
using namespace std;



//--------
int main()
//--------
{ 
	save("main.cpp");

	// 문제 : 양의 정수 num(int 의 max 값까진 받자)을 입력 받아라
	// num 개 만큼 int를 저장할 메모리를 확보하라
	//메모리의 내용을 1부터 시작하는 정수로 채워라
	// 메모리에 저장한 int 값의 합계를 출력하라
	// 이 과정을 영원히 반복하라


	while (true) {
		cout << "값을 입력하세요" << endl;
		int num;
		cin >> num;

		vector<int> v(num);
		iota(v.begin(), v.end(), 1);


		int* p;
		try {
			p = new int[num];    // free-store , Heap(x)
		}
		catch (const exception& e) {
			return 0;
		}
		iota(p, p + num, 1);


		long long sum = accumulate(p, p + num, 0LL );

		cout << "1부터 " << num << " 까지의 합계는 : " << accumulate(v.begin(), v.end(), 0LL) << endl;
		cout << "1부터 " << num << " 까지의 합계는 : " << sum << endl;


		delete[] p;


	}

}

======================================
저장한 시간: 2025-03-25 오후 4:17:30 화요일
======================================

// ------------------------------------------------------------
//  - 3 / 25 -
// ------------------------------------------------------------
// 동적(real-time(돌려봐야 알 수 있는)) 할당과 스마트 포인터
// ------------------------------------------------------------

#include <iostream>
#include <vector>
#include <numeric>

#include "save.h"
using namespace std;

void f() 
{
	int* p;
	p = new int[10];

	cout << "번지 - " << p << " - ";
	for (int i = 0; i < 10; ++i) {
		cout << p[i] << " " << endl;
	}

	delete[] p;
}

//--------
int main()
//--------
{ 
	save("main.cpp");
	
	f();

}




======================================
저장한 시간: 2025-03-25 오후 4:18:42 화요일
======================================

// ------------------------------------------------------------
//  - 3 / 25 -
// ------------------------------------------------------------
// 동적(real-time(돌려봐야 알 수 있는)) 할당과 스마트 포인터
// ------------------------------------------------------------

#include <iostream>
#include <vector>
#include <numeric>

#include "save.h"
using namespace std;

void f() 
{
	int* p;
	p = new int[10];

	cout << "번지 - " << p << " - ";
	for (int i = 0; i < 10; ++i) {
		cout << p[i] << " ";
	}
	cout << endl;
	delete[] p;
}

//--------
int main()
//--------
{ 
	save("main.cpp");
	
	for(int i=0;i<10;++i)
		f();

}

======================================
저장한 시간: 2025-03-25 오후 4:19:32 화요일
======================================

// ------------------------------------------------------------
//  - 3 / 25 -
// ------------------------------------------------------------
// 동적(real-time(돌려봐야 알 수 있는)) 할당과 스마트 포인터
// ------------------------------------------------------------

#include <iostream>
#include <vector>
#include <numeric>

#include "save.h"
using namespace std;

void f() 
{
	int* p;
	p = new int[10] {};

	cout << "번지 - " << p << " - ";
	for (int i = 0; i < 10; ++i) {
		cout << p[i] << " ";
	}
	cout << endl;
	delete[] p;
}

//--------
int main()
//--------
{ 
	save("main.cpp");
	
	for(int i=0;i<10;++i)
		f();

}


======================================
저장한 시간: 2025-03-25 오후 4:22:52 화요일
======================================

// ------------------------------------------------------------
//  - 3 / 25 -
// ------------------------------------------------------------
// 동적(real-time(돌려봐야 알 수 있는)) 할당과 스마트 포인터
// ------------------------------------------------------------

#include <iostream>
#include <vector>
#include <numeric>

#include "save.h"
using namespace std;

void f() 
{
	int* p;
	p = new int[10] {};

	//예외발생
	throw 01123;

	cout << "이 문장은 출력되지 않는다" << endl;
	delete[] p;
}

//--------
int main()
//--------
{ 
	save("main.cpp");
	
	f();

	cout << "메인은 끝나나?" << endl;
}

======================================
저장한 시간: 2025-03-25 오후 4:24:46 화요일
======================================

// ------------------------------------------------------------
//  - 3 / 25 -
// ------------------------------------------------------------
// 동적(real-time(돌려봐야 알 수 있는)) 할당과 스마트 포인터
// ------------------------------------------------------------

#include <iostream>
#include <vector>
#include <numeric>

#include "save.h"
using namespace std;

void f() 
{
	int* p;
	p = new int[10] {};

	//예외발생
	throw 123;

	cout << "이 문장은 출력되지 않는다" << endl;
	delete[] p;
}

//--------
int main()
//--------
{ 
	save("main.cpp");
	
	try {
		f();
	}
	catch (...) {

	}

	cout << "메인은 끝나나?" << endl;
}

======================================
저장한 시간: 2025-03-25 오후 4:32:04 화요일
======================================

// ------------------------------------------------------------
//  - 3 / 25 -
// ------------------------------------------------------------
// 동적(real-time(돌려봐야 알 수 있는)) 할당과 스마트 포인터
// ------------------------------------------------------------

#include <iostream>
#include <vector>
#include <numeric>

#include "save.h"
using namespace std;


class Dog {

};

class 스마트 {
public:
	스마트() {}
	스마트(Dog* p) {}
	~스마트() {
		cout << "예외가 발생하더라도 지역객체는 반드시 소멸됨을 보장한다 (stack unwinding)" << endl;
		//스택 언와인딩 - 스택을 되집어 가면서 만들어진 데이터를 소멸시킨다
	}
};

void f() 
{
	스마트 p{new Dog};
	

	//예외발생
	throw 123;


	cout << "이 문장은 출력되지 않는다" << endl;

}

//--------
int main()
//--------
{ 
	save("main.cpp");
	
	try {
		f();
	}
	catch (...) {

	}

	cout << "메인은 끝나나?" << endl;
}

======================================
저장한 시간: 2025-03-25 오후 4:35:54 화요일
======================================

// ------------------------------------------------------------
//  - 3 / 25 -
// ------------------------------------------------------------
// 동적(real-time(돌려봐야 알 수 있는)) 할당과 스마트 포인터
// ------------------------------------------------------------

#include <iostream>
#include <vector>
#include <numeric>

#include "save.h"
using namespace std;


class Dog {

};

class 스마트 {
	Dog* p;
public:
	스마트() {}
	스마트(Dog* p) : p{ p } {}   // RAII 
	~스마트() {
		delete p;
		cout << "예외가 발생하더라도 지역객체는 반드시 소멸됨을 보장한다 (stack unwinding)" << endl;
		//스택 언와인딩 - 스택을 되집어 가면서 만들어진 데이터를 소멸시킨다
	}
};

void f() 
{
	스마트 p { new Dog };  //할당과 초기화는 다르다
	
	//예외발생
	throw 123;

	cout << "이 문장은 출력되지 않는다" << endl;

}

//--------
int main()
//--------
{ 
	save("main.cpp");
	
	try {
		f();
	}
	catch (...) {

	}

	cout << "메인은 끝나나?" << endl;
}

======================================
저장한 시간: 2025-03-25 오후 4:40:12 화요일
======================================

// ------------------------------------------------------------
//  - 3 / 25 -
// ------------------------------------------------------------
// 동적(real-time(돌려봐야 알 수 있는)) 할당과 스마트 포인터
// ------------------------------------------------------------

#include <iostream>
#include <vector>
#include <numeric>

#include "save.h"
using namespace std;


class Dog {
public:
	Dog() { cout << "멍멍" << endl; }
	~Dog() { cout << "dead" << endl; }
};

class 스마트 {
	Dog* p;
public:
	스마트() {}
	스마트(Dog* p) : p{ p } {}   // RAII 
	~스마트() {
		delete p;
		cout << "예외가 발생하더라도 지역객체는 반드시 소멸됨을 보장한다 (stack unwinding)" << endl;
		//스택 언와인딩 - 스택을 되집어 가면서 만들어진 데이터를 소멸시킨다
	}
};

void f() 
{
	//핸들러가 존재할때만 사용한다 (자바와 같은 경우엔 쓰레기차 운영)
	스마트 p { new Dog };  //할당과 초기화는 다르다
	
	//예외발생
	throw 123;

	cout << "이 문장은 출력되지 않는다" << endl;

}

//--------
int main()
//--------
{ 
	save("main.cpp");
	
	try {
		f();
	}
	catch (...) {

	}

	cout << "메인은 끝나나?" << endl;
}

======================================
저장한 시간: 2025-03-25 오후 4:42:45 화요일
======================================

// ------------------------------------------------------------
//  - 3 / 25 -
// ------------------------------------------------------------
// 동적(real-time(돌려봐야 알 수 있는)) 할당과 스마트 포인터
// ------------------------------------------------------------

#include <iostream>
#include <vector>
#include <numeric>
#include <memory>

#include "save.h"
using namespace std;


class Dog {
public:
	Dog() { cout << "멍멍" << endl; }
	~Dog() { cout << "dead" << endl; }
};

class 스마트 {
	Dog* p;
public:
	스마트() {}
	스마트(Dog* p) : p{ p } {}   // RAII 
	~스마트() {
		delete p;
		cout << "예외가 발생하더라도 지역객체는 반드시 소멸됨을 보장한다 (stack unwinding)" << endl;
		//스택 언와인딩 - 스택을 되집어 가면서 만들어진 데이터를 소멸시킨다
	}
};

void f() 
{
	//핸들러가 존재할때만 사용한다 (자바와 같은 경우엔 쓰레기차 운영)
	unique_ptr<Dog> p { new Dog };  // 표준 스마트 포인터
	
	//예외발생
	// 
	//throw 123;

	cout << "이 문장은 출력되지 않는다" << endl;

}

//--------
int main()
//--------
{ 
	save("main.cpp");
	
	try {
		f();
	}
	catch (...) {

	}

	cout << "메인은 끝나나?" << endl;
}

======================================
저장한 시간: 2025-03-25 오후 4:45:16 화요일
======================================

// ------------------------------------------------------------
//  - 3 / 25 -
// ------------------------------------------------------------
// 동적(real-time(돌려봐야 알 수 있는)) 할당과 스마트 포인터
// ------------------------------------------------------------

#include <iostream>
#include <vector>
#include <numeric>
#include <memory>

#include "save.h"
using namespace std;


class Dog {
public:
	Dog() { cout << "멍멍" << endl; }
	~Dog() { cout << "dead" << endl; }
};

class 스마트 {
	Dog* p;
public:
	스마트() {}
	스마트(Dog* p) : p{ p } {}   // RAII 
	~스마트() {
		delete p;
		cout << "예외가 발생하더라도 지역객체는 반드시 소멸됨을 보장한다 (stack unwinding)" << endl;
		//스택 언와인딩 - 스택을 되집어 가면서 만들어진 데이터를 소멸시킨다
	}
};

void f() 
{
	//핸들러가 존재할때만 사용한다 (자바와 같은 경우엔 쓰레기차 운영)
	unique_ptr<Dog> p = make_unique<Dog>();  // 표준 스마트 포인터 = 동적할당
	
	//예외발생
	throw 123;

	cout << "이 문장은 출력되지 않는다" << endl;

}

//--------
int main()
//--------
{ 
	save("main.cpp");
	
	try {
		f();
	}
	catch (...) {

	}

	cout << "메인은 끝나나?" << endl;
}

======================================
저장한 시간: 2025-03-25 오후 4:46:27 화요일
======================================

// ------------------------------------------------------------
//  - 3 / 25 -
// ------------------------------------------------------------
// 동적(real-time(돌려봐야 알 수 있는)) 할당과 스마트 포인터
// ------------------------------------------------------------

#include <iostream>
#include <vector>
#include <numeric>
#include <memory>

#include "save.h"
using namespace std;


class Dog {
public:
	Dog() { cout << "멍멍" << endl; }
	~Dog() { cout << "dead" << endl; }
};

class 스마트 {
	Dog* p;
public:
	스마트() {}
	스마트(Dog* p) : p{ p } {}   // RAII 
	~스마트() {
		delete p;
		cout << "예외가 발생하더라도 지역객체는 반드시 소멸됨을 보장한다 (stack unwinding)" << endl;
		//스택 언와인딩 - 스택을 되집어 가면서 만들어진 데이터를 소멸시킨다
	}
};

void f() 
{
	//핸들러가 존재할때만 사용한다 (자바와 같은 경우엔 쓰레기차 운영)
	unique_ptr<Dog[]> p = make_unique<Dog[]>(3);  // 표준 스마트 포인터 = 동적할당 -> 여러개 생성
	
	//예외발생
	//throw 123;

	cout << "이 문장은 출력되지 않는다" << endl;

}

//--------
int main()
//--------
{ 
	save("main.cpp");
	
	try {
		f();
	}
	catch (...) {

	}

	cout << "메인은 끝나나?" << endl;
}

======================================
저장한 시간: 2025-03-25 오후 5:06:19 화요일
======================================

// ------------------------------------------------------------
//  - 3 / 25 -
// ------------------------------------------------------------
// 동적(real-time(돌려봐야 알 수 있는)) 할당과 스마트 포인터 -
// RAII -자원의 생명주기를 객체의 생명주기와 일치시키는 프로그래밍 기법
// ------------------------------------------------------------



#include <iostream>
#include <vector>
#include <numeric>
#include <memory>
#include <fstream>
#include <string>

#include "save.h"
using namespace std;


class Dog {
public:
	Dog() { cout << "멍멍" << endl; }
	~Dog() { cout << "dead" << endl; }
};

class 스마트 {
	Dog* p;
public:
	스마트() {}
	스마트(Dog* p) : p{ p } {}   // RAII 자원의 생명 주기를 객체의 생성 주기와 일치시킨다
	~스마트() {
		delete p;
		cout << "예외가 발생하더라도 지역객체는 반드시 소멸됨을 보장한다 (stack unwinding)" << endl;
		//스택 언와인딩 - 스택을 되집어 가면서 만들어진 데이터를 소멸시킨다
	}
};

void f() 
{
	//핸들러가 존재할때만 사용한다 (자바와 같은 경우엔 쓰레기차 운영)
	unique_ptr<Dog[]> p = make_unique<Dog[]>(3);  // 표준 스마트 포인터 = 동적할당 -> 여러개 생성
	
	//예외발생
	//throw 123;

	cout << "이 문장은 출력되지 않는다" << endl;

}



//--------
int main()
//--------
{
	//문제 "main.cpp" 에 있는 소문자를 모두 대문자로 바꾸어 "메인 대문자.cpp"에 저장하라
	ifstream in{"main.cpp"};
	if (not in) {
		return 1;
	}
	ofstream out{ "메인 대문자.cpp" };

	char c{};
	in >> noskipws;
	while (in>>c) {
		if (islower(c))
			c =toupper(c);
		out << c;
	}

	save("main.cpp");
	
	
}

======================================
저장한 시간: 2025-03-25 오후 5:13:17 화요일
======================================

// ------------------------------------------------------------
//  - 3 / 25 -
// ------------------------------------------------------------
// 동적(real-time(돌려봐야 알 수 있는)) 할당과 스마트 포인터 -
// RAII -자원의 생명주기를 객체의 생명주기와 일치시키는 프로그래밍 기법
// ------------------------------------------------------------



#include <iostream>
#include <fstream>
#include <algorithm>

#include "save.h"
using namespace std;


//--------
int main()
//--------
{
	//문제 "main.cpp" 에 있는 소문자를 모두 대문자로 바꾸어 "메인 대문자.cpp"에 저장하라
	ifstream in{"main.cpp"};
	if (not in) {
		return 1;
	}
	ofstream out{ "메인 대문자.cpp" };

	/*char c{};
	in >> noskipws;
	while (in>>c) {
		c =toupper(c);
		out << c;
	}*/

	transform(istreambuf_iterator<char>{in}, {},
		ostreambuf_iterator<char>{out},
		[](char c) {return toupper(c); });
	

	save("main.cpp");
	
	
}

======================================
저장한 시간: 2025-03-27 오전 10:55:11 목요일
======================================

// ------------------------------------------------------------
//  - 3 / 27 -
// ------------------------------------------------------------
// callable type - 
// ------------------------------------------------------------

#include <iostream>
#include <array>
#include <algorithm>
#include <random>
#include <cstdlib>

#include "save.h"
using namespace std;

// 문제 랜덤 int 1000만개를 메모리에 저장하라
// qsort를 이용하여 오름차순 정렬한다
// 정렬결과를 앞에서부터 1000개를 화면 출력하라

default_random_engine dre{};
uniform_int_distribution uid{0,999'9999};

array<int, 1000'0000> a;

int 기준(const void* a, const void* b) {
	int* p = (int*)a;
	int* q = (int*)b;
	if (*p > *q)
		return 1;
	else if (*p < *q)
		return -1;
	return 0;
}

//--------
int main()
//--------
{
	for (int& val : a) {
		val = uid(dre);
	}

	qsort(a.data(), a.size(), sizeof(array<int,a.size()>::value_type),기준 );

	for (int i = 0; i < 1000; ++i) {
		cout << a[i] << endl;
	}

	save("main.cpp");
	
	
}

======================================
저장한 시간: 2025-03-27 오전 10:59:32 목요일
======================================

// ------------------------------------------------------------
//  - 3 / 27 -
// ------------------------------------------------------------
// callable type - 
// ------------------------------------------------------------

#include <iostream>
#include <array>
#include <random>
#include <ranges>
//#include <cstdlib>
#include <print>

#include "save.h"
using namespace std;

// 문제 랜덤 int 1000만개를 메모리에 저장하라
// qsort를 이용하여 오름차순 정렬한다
// 정렬결과를 앞에서부터 1000개를 화면 출력하라

default_random_engine dre{};
uniform_int_distribution uid{0,999'9999};

array<int, 1000'0000> a;

int 기준(const void* a, const void* b) {
	int* p = (int*)a;
	int* q = (int*)b;
	if (*p > *q)
		return 1;
	else if (*p < *q)
		return -1;
	return 0;
}

//--------
int main()
//--------
{
	for (int& val : a) {
		val = uid(dre);
	}

	qsort(a.data(), a.size(), sizeof(array<int,a.size()>::value_type),기준 );

	for (int num : a | views::take(100) ) {  //   | : 버티컬 바
		print("{:8}", num);
	}

	save("main.cpp");
	
	
}

======================================
저장한 시간: 2025-03-27 오전 11:09:41 목요일
======================================

// ------------------------------------------------------------
//  - 3 / 27 -
// ------------------------------------------------------------
// callable type - 
// ------------------------------------------------------------

#include <iostream>
#include <array>
#include <random>
#include <ranges>
//#include <cstdlib>
#include <print>

#include "save.h"
using namespace std;

// 문제 랜덤 int 1000만개를 메모리에 저장하라
// qsort를 이용하여 오름차순 정렬한다
// 정렬결과를 앞에서부터 1000개를 화면 출력하라

default_random_engine dre{};
uniform_int_distribution uid{0,999'9999};

array<int, 1000'0000> a;

int 오름차순(const void* a, const void* b) {
	int* p = (int*)a;
	int* q = (int*)b;
	if (*p > *q)
		return 1;
	else if (*p < *q)
		return -1;
	return 0;
}

//--------
int main()
//--------
{
	for (int& val : a) {
		val = uid(dre);
	}

	int (*정렬기준)(const void* a, const void* b);
	정렬기준 = 오름차순;
	qsort(a.data(), a.size(), sizeof(array<int,a.size()>::value_type), 정렬기준 );

	for (int num : a | views::take(100) ) {  //   | : 버티컬 바    //다양한 필터가 있다
		print("{:8}", num);
	}

	save("main.cpp");
	
	
}

======================================
저장한 시간: 2025-03-27 오전 11:14:11 목요일
======================================

// ------------------------------------------------------------
//  - 3 / 27 -
// ------------------------------------------------------------
// callable type - 
// ------------------------------------------------------------

#include <iostream>
#include <array>
#include <random>
#include <ranges>
//#include <cstdlib>
#include <print>

#include "save.h"
using namespace std;

// 문제 랜덤 int 1000만개를 메모리에 저장하라
// qsort를 이용하여 오름차순 정렬한다
// 정렬결과를 앞에서부터 1000개를 화면 출력하라

default_random_engine dre{};
uniform_int_distribution uid{0,999'9999};

array<int, 1000'0000> a;

int 오름차순(const void* a, const void* b) {
	int* p = (int*)a;
	int* q = (int*)b;
	if (*p > *q)
		return 1;
	else if (*p < *q)
		return -1;
	return 0;
}
int 내림차순(const void* a, const void* b) {
	int* p = (int*)a;
	int* q = (int*)b;
	if (*p < *q)
		return 1;
	else if (*p > *q)
		return -1;
	return 0;
}

//--------
int main()
//--------
{
	for (int& val : a) {
		val = uid(dre);
	}

	int (*정렬기준)(const void* a, const void* b) {오름차순}; // int(*)(const void* a, const void* b)
	정렬기준 = 내림차순;
	qsort(a.data(), a.size(), sizeof(array<int,a.size()>::value_type), 정렬기준 );

	for (int num : a | views::take(100) ) {  //   | : 버티컬 바    //다양한 필터가 있다
		print("{:8}", num);
	}

	save("main.cpp");
	
	
}

======================================
저장한 시간: 2025-03-27 오전 11:20:08 목요일
======================================

// ------------------------------------------------------------
//  - 3 / 27 -
// ------------------------------------------------------------
// callable type - 
// ------------------------------------------------------------

#include <iostream>
#include <array>
#include <random>
#include <ranges>
#include <algorithm>
#include <print>

#include "save.h"
using namespace std;

// 문제 랜덤 int 1000만개를 메모리에 저장하라
// stl의 sort를 이용하여 정렬하라
// 정렬결과를 앞에서부터 1000개를 화면 출력하라

default_random_engine dre{};
uniform_int_distribution uid{0,999'9999};

array<int, 1000'0000> a;

//--------
int main()
//--------
{
	for (int& val : a) {
		val = uid(dre);
	}

	sort(a.begin(), a.end());
	//sort(a.end(), a.begin());

	for (int num : a | views::take(100) ) {  //   | : 버티컬 바    //다양한 필터가 있다
		print("{:8}", num);
	}

	save("main.cpp");
	
	
}

======================================
저장한 시간: 2025-03-27 오전 11:27:57 목요일
======================================

// ------------------------------------------------------------
//  - 3 / 27 -
// ------------------------------------------------------------
// callable type - 
// ------------------------------------------------------------

#include <iostream>
#include <array>
#include <random>
#include <ranges>
#include <algorithm>
#include <print>

#include "save.h"
using namespace std;

// 문제 랜덤 int 1000만개를 메모리에 저장하라
// stl의 sort를 이용하여 정렬하라
// 정렬결과를 앞에서부터 1000개를 화면 출력하라

default_random_engine dre{};
uniform_int_distribution uid{0,999'9999};

array<int, 1000'0000> a;

bool 오름차순(int a, int b) {
	return a < b;
}

bool 내림차순(int a, int b) {
	return a > b;
}

//--------
int main()
//--------
{
	for (int& val : a) {
		val = uid(dre);
	}


	bool (*정렬기준)(int, int) = 오름차순;
	sort(a.begin(), a.end() , 정렬기준 ); 
	//sort(a.end(), a.begin());

	for (int num : a | views::take(100) ) {  //   | : 버티컬 바    //다양한 필터가 있다
		print("{:8}", num);
	}

	save("main.cpp");
	
	
}

======================================
저장한 시간: 2025-03-27 오전 11:29:34 목요일
======================================

// ------------------------------------------------------------
//  - 3 / 27 -
// ------------------------------------------------------------
// callable type - 
// ------------------------------------------------------------

#include <iostream>
#include <array>
#include <random>
#include <ranges>
#include <algorithm>
#include <print>

#include "save.h"
using namespace std;

// 문제 랜덤 int 1000만개를 메모리에 저장하라
// stl의 sort를 이용하여 정렬하라
// 정렬결과를 앞에서부터 1000개를 화면 출력하라

default_random_engine dre{};
uniform_int_distribution uid{0,999'9999};

array<int, 1000'0000> a;

bool 오름차순(int a, int b) {
	return a < b;
}

bool 내림차순(int a, int b) {
	return a > b;
}

//--------
int main()
//--------
{
	// (*main)(); //가 맞는 표기법

	for (int& val : a) {
		val = uid(dre);
	}


	bool (*정렬기준)(int, int) = 오름차순;
	sort(a.begin(), a.end() , 정렬기준 ); 
	//sort(a.end(), a.begin());

	for (int num : a | views::take(100) ) {  //   | : 버티컬 바    //다양한 필터가 있다
		print("{:8}", num);
	}

	save("main.cpp");
	
	
}

======================================
저장한 시간: 2025-03-27 오전 11:45:22 목요일
======================================

// ------------------------------------------------------------
//  - 3 / 27 -
// ------------------------------------------------------------
// callable types - 호출 가능한 타입
// 1. 함수
// 2. 함수 포인터
// 
// ------------------------------------------------------------

#include <iostream>
#include <array>
#include <random>
#include <ranges>
#include <algorithm>
#include <print>

#include "save.h"
using namespace std;

// 문제 랜덤 int 1000만개를 메모리에 저장하라
// stl의 sort를 이용하여 정렬하라
// 정렬결과를 앞에서부터 1000개를 화면 출력하라

default_random_engine dre{};
uniform_int_distribution uid{0,999'9999};

array<int, 1000'0000> a;

bool 오름차순(int a, int b) {
	return a < b;
}

bool 내림차순(int a, int b) {
	return a > b;
}

//--------
int main()
//--------
{
	// (*main)(); //가 맞는 표기법

	for (int& val : a) {
		val = uid(dre);
	}


	bool (*정렬기준)(int, int) = 내림차순;
	ranges::sort(a , 정렬기준 ); 

	for (int num : a | views::take(100) ) {
		print("{:8}", num);
	}

	save("main.cpp");
	
	
}

======================================
저장한 시간: 2025-03-27 오전 11:50:13 목요일
======================================

// ------------------------------------------------------------
//  - 3 / 27 -
// ------------------------------------------------------------
// callable types - 호출 가능한 타입
// 1. 함수
// 2. 함수 포인터
// 
// ------------------------------------------------------------

#include <iostream>
#include <array>
#include <random>
#include <ranges>
#include <algorithm>
#include <print>
#include <chrono>

#include "save.h"
using namespace std;

// 문제 랜덤 int 1000만개를 메모리에 저장하라
// stl의 sort를 이용하여 정렬하라
// 정렬결과를 앞에서부터 1000개를 화면 출력하라

default_random_engine dre{};
uniform_int_distribution uid{0,999'9999};

array<int, 1000'0000> a;

bool 오름차순(int a, int b) {
	return a < b;
}

//--------
int main()
//--------
{
	// (*main)(); //가 맞는 표기법

	for (int& val : a) {
		val = uid(dre);
	}

	
	auto b = chrono::high_resolution_clock::now(); //스톱워치 시작
	sort(a.begin(), a.end(), 오름차순);
	auto end = chrono::high_resolution_clock::now();//스톱워치 끝

	cout << "걸린시간 - " << end - b << endl;

	save("main.cpp");
	
	
}

======================================
저장한 시간: 2025-03-27 오전 11:52:12 목요일
======================================

// ------------------------------------------------------------
//  - 3 / 27 -
// ------------------------------------------------------------
// callable types - 호출 가능한 타입
// 1. 함수
// 2. 함수 포인터
// 
// ------------------------------------------------------------

#include <iostream>
#include <array>
#include <random>
#include <ranges>
#include <algorithm>
#include <print>
#include <chrono>

#include "save.h"
using namespace std;

// 문제 랜덤 int 1000만개를 메모리에 저장하라
// stl의 sort를 이용하여 정렬하라
// 정렬결과를 앞에서부터 1000개를 화면 출력하라

default_random_engine dre{};
uniform_int_distribution uid{0,999'9999};

array<int, 1000'0000> a;

bool 오름차순(int a, int b) {
	return a < b;
}

//--------
int main()
//--------
{
	// (*main)(); //가 맞는 표기법

	for (int& val : a) {
		val = uid(dre);
	}

	
	auto b = chrono::high_resolution_clock::now(); //스톱워치 시작
	sort(a.begin(), a.end(), 오름차순);
	auto end = chrono::high_resolution_clock::now();//스톱워치 끝

	cout << "걸린시간 - " << end - b << endl;
	cout << "걸린시간(초) - " << chrono::duration_cast<chrono::seconds>(end - b) << endl;

	save("main.cpp");
	
	
}

======================================
저장한 시간: 2025-03-27 오전 11:54:17 목요일
======================================

// ------------------------------------------------------------
//  - 3 / 27 -
// ------------------------------------------------------------
// callable types - 호출 가능한 타입
// 1. 함수
// 2. 함수 포인터
// 
// ------------------------------------------------------------

#include <iostream>
#include <array>
#include <random>
#include <ranges>
#include <algorithm>
#include <print>
#include <chrono>

#include "save.h"
using namespace std;

// 문제 랜덤 int 1000만개를 메모리에 저장하라
// stl의 sort를 이용하여 정렬하라
// 정렬결과를 앞에서부터 1000개를 화면 출력하라

default_random_engine dre{};
uniform_int_distribution uid{0,999'9999};

array<int, 1000'0000> a;

bool 오름차순(int a, int b) {
	return a < b;
}

//--------
int main()
//--------
{
	// (*main)(); //가 맞는 표기법


	{
		for (int& val : a) {
			val = uid(dre);
		}

		auto b = chrono::high_resolution_clock::now(); //스톱워치 시작
		sort(a.begin(), a.end(), 오름차순);
		auto end = chrono::high_resolution_clock::now();//스톱워치 끝

		cout << "걸린시간 - " << end - b << endl;
		cout << "걸린시간(초) - " << chrono::duration_cast<chrono::seconds>(end - b) << endl;
	}

	{
		for (int& val : a) {
			val = uid(dre);
		}

		auto b = chrono::high_resolution_clock::now(); //스톱워치 시작
		sort(a.begin(), a.end(), [](int a, int b) {return a < b; });
		auto end = chrono::high_resolution_clock::now();//스톱워치 끝

		cout << "걸린시간 - " << end - b << endl;
		cout << "걸린시간(초) - " << chrono::duration_cast<chrono::seconds>(end - b) << endl;
	}

	save("main.cpp");
	
	
}