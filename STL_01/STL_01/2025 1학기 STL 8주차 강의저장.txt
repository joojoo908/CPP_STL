

======================================
Save Time: 04/17/25 10:39:54 Thursday
======================================

﻿// ------------------------------------------------------------
//  - 4 / 17 -
// ------------------------------------------------------------
// 중간고사(30) 4/24 목
// 과제(30) 4/10 과제설명
// ------------------------------------------------------------
// class STRING - STL 정식 컨테이너처럼 동작하는 자료구조
// 
// STL 컨테이너들이란란 Containers are objects that store other objects.
// 클래스로 만든 객체,다른 오브젝트를 저장할 수 있는 오브젝트
// array<T,N>
// ------------------------------------------------------------

#include <iostream>
#include<vector>
#include<array>
#include <algorithm>

#include "STRING.h"
#include "save.h"
using namespace std;

extern bool 관찰;           //관찰하고 싶으면 true 로

//문제: 키보드에서 입력한 단어를 모두 저장한 후 오름차순으로 정렬하여 출력하라

//--------
int main()
//--------
{
	
	vector<string> v;

	while (1) {
		cout << "단어를 입력하시오" << endl;
		string s;
		if (cin >> s)
			break;
		v.push_back(s);
		
	}

	sort(v.begin(), v.end());

	for (const string& s : v) {
		cout << s << endl;
	}

	save("main.cpp");
	//save("STRING.cpp");
}

======================================
Save Time: 04/17/25 10:44:31 Thursday
======================================

﻿// ------------------------------------------------------------
//  - 4 / 17 -
// ------------------------------------------------------------
// 중간고사(30) 4/24 목
// 과제(30) 4/10 과제설명
// ------------------------------------------------------------
// class STRING - STL 정식 컨테이너처럼 동작하는 자료구조
// 
// STL 컨테이너들이란란 Containers are objects that store other objects.
// 클래스로 만든 객체,다른 오브젝트를 저장할 수 있는 오브젝트
// array<T,N>
// ------------------------------------------------------------

#include <iostream>
#include<vector>
#include<iterator>
#include<array>
#include <algorithm>

#include "STRING.h"
#include "save.h"
using namespace std;

extern bool 관찰;           //관찰하고 싶으면 true 로

//문제: 키보드에서 입력한 단어를 모두 저장한 후 오름차순으로 정렬하여 출력하라

//--------
int main()
//--------
{
	
	vector<string> v{ istream_iterator <string>{cin}, {} };//{입력시작,입력끝};   //ctrl z 누를때까지 입력받는다

	sort(v.begin(), v.end());

	for (const string& s : v) {
		cout << s << endl;
	}

	save("main.cpp");
	//save("STRING.cpp");
}

======================================
Save Time: 04/17/25 10:49:19 Thursday
======================================

﻿// ------------------------------------------------------------
//  - 4 / 17 -
// ------------------------------------------------------------
// 중간고사(30) 4/24 목
// 과제(30) 4/10 과제설명
// ------------------------------------------------------------
// class STRING - STL 정식 컨테이너처럼 동작하는 자료구조
// 
// STL 컨테이너들이란란 Containers are objects that store other objects.
// 클래스로 만든 객체,다른 오브젝트를 저장할 수 있는 오브젝트
// array<T,N>
// ------------------------------------------------------------

#include <iostream>
#include<vector>

#include "STRING.h"
#include "save.h"
using namespace std;

extern bool 관찰;           //관찰하고 싶으면 true 로

//벡터가 어떻게 free-store 메모리를 관리하는지  알아본다 
//--------
int main()
//--------
{
	
	vector<int> v;

	cout << "현재 원소의 갯수-" << v.size() << endl;
	cout << "재할당 없이 저장할 수 있는 원소의 갯수-" << v.capacity() << endl;
	cout << "벡터가 관리하는 메모리의 시작번지-" << v.data() << endl;

	save("main.cpp");
}

======================================
Save Time: 04/22/25 15:51:49 Tuesday
======================================

﻿// ------------------------------------------------------------
//  - 4 / 22 -
// ------------------------------------------------------------
// 중간고사(30) 4/24 목
// 과제(30) 4/10 과제설명
// ------------------------------------------------------------
// class STRING - STL 정식 컨테이너처럼 동작하는 자료구조
// 
// STL 컨테이너들이란란 Containers are objects that store other objects.
// 클래스로 만든 객체,다른 오브젝트를 저장할 수 있는 오브젝트
// array<T,N>
// ------------------------------------------------------------

#include <iostream>
#include<vector>
#include<algorithm>

#include "STRING.h"
#include "save.h"
using namespace std;

extern bool 관찰;           //관찰하고 싶으면 true 로

//벡터가 어떻게 free-store 메모리를 관리하는지  알아본다 
//--------
int main()
//--------
{
	vector<int> v{ 1,2,3,3,3,4,5 };

	//문제: v에서 3을 제거하라
	

	auto/*vector<int>::iterator*/ new_end = remove(v.begin(), v.end(), 3);
	v.erase(new_end,v.end());

	for (int num : v) {
		cout << num << endl;
	}
	cout << endl;

	save("main.cpp");
}


======================================
Save Time: 04/22/25 15:58:38 Tuesday
======================================

﻿// ------------------------------------------------------------
//  - 4 / 22 -
// ------------------------------------------------------------
// 중간고사(30) 4/24 목
// 과제(30) 4/10 과제설명
// ------------------------------------------------------------
// class STRING - STL 정식 컨테이너처럼 동작하는 자료구조
// 
// STL 컨테이너들이란란 Containers are objects that store other objects.
// 클래스로 만든 객체,다른 오브젝트를 저장할 수 있는 오브젝트
// array<T,N>
// ------------------------------------------------------------

#include <iostream>
#include<vector>
#include<algorithm>

#include "STRING.h"
#include "save.h"
using namespace std;

extern bool 관찰;           //관찰하고 싶으면 true 로

//벡터가 어떻게 free-store 메모리를 관리하는지  알아본다 
//--------
int main()
//--------
{
	vector<int> v{ 1,2,3,3,3,4,5 };

	//문제: v에서 3을 제거하라
	

	// auto/*vector<int>::iterator*/ new_end = remove(v.begin(), v.end(), 3);
	//v.erase(remove(v.begin(), v.end(), 3),v.end()); // erase-remove idiom 이라고 부른다 (항상 이렇게 코딩)
	erase(v, 3); //위의 함수와 동일 // syntactic sugar

	for (int num : v) {
		cout << num << endl;
	}
	cout << endl;

	save("main.cpp");
}


======================================
Save Time: 04/22/25 16:16:42 Tuesday
======================================

﻿// ------------------------------------------------------------
//  - 4 / 22 -
// ------------------------------------------------------------
// 중간고사(30) 4/24 목
// 과제(30) 4/10 과제설명
// ------------------------------------------------------------
// class STRING - STL 정식 컨테이너처럼 동작하는 자료구조
// 
// STL 컨테이너들이란란 Containers are objects that store other objects.
// 클래스로 만든 객체,다른 오브젝트를 저장할 수 있는 오브젝트
// array<T,N>
// ------------------------------------------------------------

#include <iostream>
#include<vector>
#include<algorithm>

#include "STRING.h"
#include "save.h"
using namespace std;

extern bool 관찰;           //관찰하고 싶으면 true 로

//벡터가 어떻게 free-store 메모리를 관리하는지  알아본다 
//--------
int main()
//--------
{
	//vector<int> v{ 1,2,3,4,5 };

	////문제: v에서 3을 제거하라
	//
	////문제 : v에서 홀수를 제거하라

	////auto/*vector<int>::iterator*/ new_end = remove(v.begin(), v.end(), [](int n) {return n & 1; }); //프러드킷
	////v.erase(new_end, v.end()); 

	//erase_if(v, [](int n) {return n & 1; });

	//for (int num : v) {
	//	cout << num << endl;
	//}
	//cout << endl;


	vector<STRING> v{ "1","22","333","4444","55555" };

	//문제 : v에서 333을 제거하라
	erase(v, "333");

	for (const STRING& s : v) {
		cout << s << endl;
	}

	save("main.cpp");
}


======================================
Save Time: 04/22/25 16:55:39 Tuesday
======================================

﻿// ------------------------------------------------------------
//  - 4 / 22 -
// ------------------------------------------------------------
// 중간고사(30) 4/24 목
// 과제(30) 4/10 과제설명
// ------------------------------------------------------------
// class STRING - STL 정식 컨테이너처럼 동작하는 자료구조
// 
// STL 컨테이너들이란란 Containers are objects that store other objects.
// 클래스로 만든 객체,다른 오브젝트를 저장할 수 있는 오브젝트
// array<T,N>
// ------------------------------------------------------------

#include <iostream>
#include<vector>
#include <list>
#include<algorithm>

#include "STRING.h"
#include "save.h"
using namespace std;

extern bool 관찰;           //관찰하고 싶으면 true 로

//벡터가 어떻게 free-store 메모리를 관리하는지  알아본다 
//--------
int main()
//--------
{
	
	list<STRING> v{ "1","22","333","4444","55555" };

	관찰 = 1;
	//문제 : v에서 333을 제거하라
	v.remove("333");
	//v.erase(remove(v.begin(),v.end(),"333"),v.end()); //리스트에서는 이러면 안된다
	관찰 = 0;

	for (const STRING& s : v) {
		cout << s << endl;
	}

	save("main.cpp");
}
