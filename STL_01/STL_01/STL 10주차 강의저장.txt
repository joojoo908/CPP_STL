

======================================
Save Time: 05/08/25 10:31:46 Thursday
======================================

﻿// ------------------------------------------------------------
//  - 5 / 08 -
// ------------------------------------------------------------
// 6월 19일 목요일 - 15주 2일 - 기말
// ------------------------------------------------------------
// class STRING - STL 정식 컨테이너처럼 동작하는 자료구조
// 
// STL 컨테이너들이란란 Containers are objects that store other objects.
// 클래스로 만든 객체,다른 오브젝트를 저장할 수 있는 오브젝트
// array<T,N>
// vector<T>	- dynamic(run-time) array , 원소에 엑세스 하는 시간이 O(1)
// deque<T>		
// list<T>		- node 기반 / 아무데서나 insert/delete 동작이 O(1)
// ------------------------------------------------------------

#include <iostream>
#include <deque>
#include <vector>
#include <list>
#include <ranges>
#include <algorithm>
#include <fstream>

#include "STRING.h"
#include "save.h"
using namespace std;

extern bool 관찰;           //관찰하고 싶으면 true 로

class Test {
	char x[1000000];
};

int main()
//--------
{
	//문제 : "main.cpp"의 단어를 list에 저장하라
	ifstream in{ "STRING.cpp" };
	if (!in) {
		return 1;
	}
	list<STRING> cont{ istream_iterator<STRING>{in} , {} };
	/*STRING s;
	while (in >> s) {
		cont.push_back(s);
	}*/

	for (const STRING& ss : cont) {
		cout << ss << endl;
	}
	//문제 : 단어를 입력받아 cont에 있는지 출력한다
	//있다면 처음부터 셌을떄 몇 번째 단어인지
	
	save("main.cpp");
}

======================================
Save Time: 05/08/25 10:55:26 Thursday
======================================

﻿// ------------------------------------------------------------
//  - 5 / 08 -
// ------------------------------------------------------------
// 6월 19일 목요일 - 15주 2일 - 기말
// ------------------------------------------------------------
// class STRING - STL 정식 컨테이너처럼 동작하는 자료구조
// 
// STL 컨테이너들이란란 Containers are objects that store other objects.
// 클래스로 만든 객체,다른 오브젝트를 저장할 수 있는 오브젝트
// array<T,N>
// vector<T>	- dynamic(run-time) array , 원소에 엑세스 하는 시간이 O(1)
// deque<T>		
// list<T>		- node 기반 / 아무데서나 insert/delete 동작이 O(1)
// ------------------------------------------------------------

#include <iostream>
#include <deque>
#include <vector>
#include <list>
#include <ranges>
#include <algorithm>
#include <fstream>

#include "STRING.h"
#include "save.h"
using namespace std;

extern bool 관찰;           //관찰하고 싶으면 true 로

class Test {
	char x[1000000];
};

int main()
//--------
{
	//문제 : "main.cpp"의 단어를 list에 저장하라
	ifstream in{ "STRING.cpp" };
	if (!in) {
		return 1;
	}
	list<STRING> cont{ istream_iterator<STRING>{in} , {} };
	

	for (const STRING& ss : cont) {
		cout << ss << endl;
	}
	//문제 : 단어를 입력받아 cont에 있는지 출력한다
	//있다면 처음부터 셌을떄 몇 번째 단어인지

	cout << "찾을 단어는?:";
	STRING word;
	cin >> word;

	auto pos = find(cont.begin(), cont.end(), word);
	if (pos == cont.end()) {
		cout << word << "는 리스트에 없는 단어입니다.";
	}
	else {
		cout<< distance(cont.begin(), pos)+1 <<"번째 단어입니다.";
	}
	
	save("main.cpp");
}

======================================
Save Time: 05/08/25 11:18:03 Thursday
======================================

﻿// ------------------------------------------------------------
//  - 5 / 08 -
// ------------------------------------------------------------
// 6월 19일 목요일 - 15주 2일 - 기말
// ------------------------------------------------------------
// class STRING - STL 정식 컨테이너처럼 동작하는 자료구조
// 
// STL 컨테이너들이란란 Containers are objects that store other objects.
// 클래스로 만든 객체,다른 오브젝트를 저장할 수 있는 오브젝트
// array<T,N>
// vector<T>	- dynamic(run-time) array , 원소에 엑세스 하는 시간이 O(1)
// deque<T>		
// list<T>		- node 기반 / 아무데서나 insert/delete 동작이 O(1)
// ------------------------------------------------------------

#include <iostream>
#include <deque>
#include <vector>
#include <list>
#include <ranges>
#include <algorithm>
#include <fstream>

#include "STRING.h"
#include "save.h"
using namespace std;

extern bool 관찰;           //관찰하고 싶으면 true 로

class Test {
	char x[1000000];
};

int main()
//--------
{
	//문제 : "main.cpp"의 단어를 list에 저장하라
	ifstream in{ "STRING.cpp" };
	if (!in) {
		return 1;
	}
	list<STRING> cont{ istream_iterator<STRING>{in} , {} };
	

	/*for (const STRING& ss : cont) {
		cout << ss << endl;
	}*/
	//문제 : 리스트에 있는 단어 중에서 길이가 5인 것만 화면에 출력하라

	copy_if(cont.begin(), cont.end(), ostream_iterator<STRING>{cout, "\n"}, [](const STRING& s) {return 5 == s.size(); }); //알고리즘은 predicate 으로 조건을 줄 수 있다.

	/*for (const STRING& ss : cont) {
		if(ss.size() == 5)
			cout << ss << endl;
	}*/
	
	save("main.cpp");
}

======================================
Save Time: 05/08/25 11:45:46 Thursday
======================================

﻿// ------------------------------------------------------------
//  - 5 / 08 -
// ------------------------------------------------------------
// 6월 19일 목요일 - 15주 2일 - 기말
// ------------------------------------------------------------
// class STRING - STL 정식 컨테이너처럼 동작하는 자료구조
// 
// STL 컨테이너들이란란 Containers are objects that store other objects.
// 클래스로 만든 객체,다른 오브젝트를 저장할 수 있는 오브젝트
// array<T,N>
// vector<T>	- dynamic(run-time) array , 원소에 엑세스 하는 시간이 O(1)
// deque<T>		
// list<T>		- node 기반 / 아무데서나 insert/delete 동작이 O(1)
// forward_list<T> - [Note 1 : It is intended that forward_list have zero space or time overhead 
//				 relative to a hand-written C-style singly linked list. 
//				Features that would conflict with that goal have been omitted.— end note]
// 
// span - 
// ------------------------------------------------------------

#include <iostream>
#include <span>

#include "STRING.h"
#include "save.h"
using namespace std;

extern bool 관찰;           //관찰하고 싶으면 true 로

//f 는 거꾸로 출력하는 함수
void f(span<int> s)
{
	for (auto i = s.rbegin(); i != s.rend(); ++i) {
		cout << *i << " ";
	}
	cout << endl;
}

int main()
//--------
{
	int a[10]{ 1,2,3,4,5,6,7,8,9,10 }; 
	//거꾸로 출력하라
	f(a);

	
	save("main.cpp");
}

======================================
Save Time: 05/08/25 11:50:04 Thursday
======================================

﻿// ------------------------------------------------------------
//  - 5 / 08 -
// ------------------------------------------------------------
// 6월 19일 목요일 - 15주 2일 - 기말
// ------------------------------------------------------------
// class STRING - STL 정식 컨테이너처럼 동작하는 자료구조
// 
// STL 컨테이너들이란란 Containers are objects that store other objects.
// 클래스로 만든 객체,다른 오브젝트를 저장할 수 있는 오브젝트
// array<T,N>
// vector<T>	- dynamic(run-time) array , 원소에 엑세스 하는 시간이 O(1)
// deque<T>		
// list<T>		- node 기반 / 아무데서나 insert/delete 동작이 O(1)
// forward_list<T> - [Note 1 : It is intended that forward_list have zero space or time overhead 
//				 relative to a hand-written C-style singly linked list. 
//				Features that would conflict with that goal have been omitted.— end note]
// 
// span - 모든 contiguous 자료구조를 대표하는 자료구조
// function -  모든 callable 을 표현
// ------------------------------------------------------------

#include <iostream>
#include <span>
#include <vector>
#include <deque>

#include "STRING.h"
#include "save.h"
using namespace std;

extern bool 관찰;           //관찰하고 싶으면 true 로

//f 는 거꾸로 출력하는 함수
void f(span<int> s)
{
	for (auto i = s.rbegin(); i != s.rend(); ++i) {
		cout << *i << " ";
	}
	cout << endl;
}

int main()
//--------
{
	int a[10]{ 1,2,3,4,5,6,7,8,9,10 }; 
	//거꾸로 출력하라
	f(a);

	vector<int> v{ begin(a),end(a) };
	f(v);

	//안됨
	//deque<int> d{ begin(a),end(a) };
	//f(d);



	
	save("main.cpp");
}

======================================
Save Time: 05/08/25 11:51:32 Thursday
======================================

﻿// ------------------------------------------------------------
//  - 5 / 08 -
// ------------------------------------------------------------
// 6월 19일 목요일 - 15주 2일 - 기말
// ------------------------------------------------------------
// class STRING - STL 정식 컨테이너처럼 동작하는 자료구조
// 
// STL 컨테이너들이란란 Containers are objects that store other objects.
// 클래스로 만든 객체,다른 오브젝트를 저장할 수 있는 오브젝트
// array<T,N>
// vector<T>	- dynamic(run-time) array , 원소에 엑세스 하는 시간이 O(1)
// deque<T>		
// list<T>		- node 기반 / 아무데서나 insert/delete 동작이 O(1)
// forward_list<T> - [Note 1 : It is intended that forward_list have zero space or time overhead 
//				 relative to a hand-written C-style singly linked list. 
//				Features that would conflict with that goal have been omitted.— end note]
// 
// span - 모든 contiguous 자료구조를 대표하는 자료구조
// function -  모든 callable 을 표현
// ------------------------------------------------------------

#include <iostream>
#include <span>
#include <vector>
#include <deque>
#include <string>

#include "STRING.h"
#include "save.h"
using namespace std;

extern bool 관찰;           //관찰하고 싶으면 true 로

//f 는 거꾸로 출력하는 함수
void f(span<char> s)
{
	for (auto i = s.rbegin(); i != s.rend(); ++i) {
		cout << *i << " ";
	}
	cout << endl;
}

int main()
//--------
{
	string s{ "hello world" };
	f(s);
	
	save("main.cpp");
}

======================================
Save Time: 05/08/25 12:02:05 Thursday
======================================

﻿// ------------------------------------------------------------
//  - 5 / 08 -
// ------------------------------------------------------------
// 6월 19일 목요일 - 15주 2일 - 기말
// ------------------------------------------------------------
// iterator(반복자) - Iterators are a generalization of pointers // 포인터를 일반화 한것 but 포인터는 아님
//			that allow a C++ program to work with different data structures(for example, containers and ranges) in a uniform manner. // 서로 다른 자료구조에 대해 일관된 방식으로 작동하도록
// ------------------------------------------------------------

#include <iostream>
#include <algorithm>

#include "STRING.h"
#include "save.h"
using namespace std;

extern bool 관찰;           //관찰하고 싶으면 true 로

int main()
//--------
{
	int a[10] = { 1,3,5,7,9,2,4,6,8,10 };
	sort(begin(a)+4, begin(a)+6); //begin(a)+4, begin(a)+6은 range

	for (int num : a)
		cout << num << " ";

	save("main.cpp");
}

======================================
Save Time: 05/08/25 12:05:57 Thursday
======================================

﻿// ------------------------------------------------------------
//  - 5 / 08 -
// ------------------------------------------------------------
// 6월 19일 목요일 - 15주 2일 - 기말
// ------------------------------------------------------------
// iterator(반복자) - Iterators are a generalization of pointers // 포인터를 일반화 한것 but 포인터는 아님
//			that allow a C++ program to work with different data structures(for example, containers and ranges) in a uniform manner. // 서로 다른 자료구조에 대해 일관된 방식으로 작동하도록
// ------------------------------------------------------------

#include <iostream>
#include <iterator>

#include "STRING.h"
#include "save.h"
using namespace std;

extern bool 관찰;           //관찰하고 싶으면 true 로

int main()
//--------
{
	//출력반복자를 만든다
	ostream_iterator<char> p{cout}; // 못만드는 이유는 디폴트 생성자가 없다, 어디에 출력할지 정해주어야 한다

	*p = 'A';
	++p;
	*p = 'B';
	++p;
	*p = 'C';

	save("main.cpp");
}

======================================
Save Time: 05/08/25 12:11:13 Thursday
======================================

﻿// ------------------------------------------------------------
//  - 5 / 08 -
// ------------------------------------------------------------
// 6월 19일 목요일 - 15주 2일 - 기말
// ------------------------------------------------------------
// iterator(반복자) - Iterators are a generalization of pointers // 포인터를 일반화 한것 but 포인터는 아님
//			that allow a C++ program to work with different data structures(for example, containers and ranges) in a uniform manner. // 서로 다른 자료구조에 대해 일관된 방식으로 작동하도록
// ------------------------------------------------------------

#include <iostream>
#include <iterator>

#include "STRING.h"
#include "save.h"
using namespace std;

extern bool 관찰;           //관찰하고 싶으면 true 로

int main()
//--------
{
	//출력반복자를 만든다
	ostream_iterator<char> p{cout}; // 못만드는 이유는 디폴트 생성자가 없다, 어디에 출력할지 정해주어야 한다

	p.operator*() = 'A';
	p.operator++();
	*p = 'B';
	++p;
	*p = 'C';

	// =   p='A'; p='c' 로도 가능하지만 포인터처럼 보이기 위해 안해도 될 짓을 한다

	save("main.cpp");
}

======================================
Save Time: 05/08/25 12:18:41 Thursday
======================================

﻿// ------------------------------------------------------------
//  - 5 / 08 -
// ------------------------------------------------------------
// 6월 19일 목요일 - 15주 2일 - 기말
// ------------------------------------------------------------
// iterator(반복자) - Iterators are a generalization of pointers // 포인터를 일반화 한것 but 포인터는 아님
//			that allow a C++ program to work with different data structures(for example, containers and ranges) in a uniform manner. // 서로 다른 자료구조에 대해 일관된 방식으로 작동하도록
// ------------------------------------------------------------

#include <iostream>
#include <iterator>
#include <string>

#include "STRING.h"
#include "save.h"
using namespace std;

extern bool 관찰;           //관찰하고 싶으면 true 로

int main()
//--------
{
	STRING s{ "hello" };

	for (char c : s) {
		cout << c <<endl;
	}
	/*for (auto i = s.begin(); i != s.end(); ++i) { //위와 같다
		cout << *i << endl;
	}*/

	save("main.cpp");
}