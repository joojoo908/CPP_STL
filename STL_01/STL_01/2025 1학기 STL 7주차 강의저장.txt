

======================================
������ �ð�: 2025-04-15 ���� 4:49:22 ȭ����
======================================

﻿// ------------------------------------------------------------
//  - 4 / 15 -
// ------------------------------------------------------------
// 중간고사(30) 4/24 목
// 과제(30) 4/10 과제설명
// ------------------------------------------------------------
// class STRING - STL 정식 컨테이너처럼 동작하는 자료구조
// 
// STL 컨테이너들이란란 Containers are objects that store other objects.
// 클래스로 만든 객체,다른 오브젝트를 저장할 수 있는 오브젝트
// array<T,N>
// ------------------------------------------------------------

#include <iostream>
#include<vector>
#include<array>

#include "STRING.h"
#include "save.h"
using namespace std;

extern bool 관찰;           //관찰하고 싶으면 true 로

//--------
int main()
//--------
{
	//vector<array<Dog,10>> v;   //v가 컨테이너(자료구조)  

	cout << "v가 담고있는 원소의 타입 : " << typeid(vector<int>::value_type).name() << endl;

	array<int, 5> a{ 1,2,3,4,5 };


		//꼭 검사 해야겠다면! 
		cout << "몇 번쨰 값을 원하나요?";
		int num;
		cin >> num;

		try {
			cout << a.at(num) << endl;
		}
		catch (const exception& e) {
			cout << e.what() << endl;
		}
	
	

	save("main.cpp");
	//save("STRING.cpp");
}

======================================
������ �ð�: 2025-04-15 ���� 4:51:59 ȭ����
======================================

﻿// ------------------------------------------------------------
//  - 4 / 15 -
// ------------------------------------------------------------
// 중간고사(30) 4/24 목
// 과제(30) 4/10 과제설명
// ------------------------------------------------------------
// class STRING - STL 정식 컨테이너처럼 동작하는 자료구조
// 
// STL 컨테이너들이란란 Containers are objects that store other objects.
// 클래스로 만든 객체,다른 오브젝트를 저장할 수 있는 오브젝트
// array<T,N>
// ------------------------------------------------------------

#include <iostream>
#include<vector>
#include<array>

#include "STRING.h"
#include "save.h"
using namespace std;

extern bool 관찰;           //관찰하고 싶으면 true 로

//--------
int main()
//--------
{
	
	vector<int> v{ 1,2,3 };

	cout << "v의 크기 - " << sizeof v << endl;
	cout << "v의 주소 - " << addressof( v) << endl;
	cout << "v의 타입 - " << typeid(v).name() << endl;
	

	save("main.cpp");
	//save("STRING.cpp");
}

======================================
������ �ð�: 2025-04-15 ���� 4:53:11 ȭ����
======================================

﻿// ------------------------------------------------------------
//  - 4 / 15 -
// ------------------------------------------------------------
// 중간고사(30) 4/24 목
// 과제(30) 4/10 과제설명
// ------------------------------------------------------------
// class STRING - STL 정식 컨테이너처럼 동작하는 자료구조
// 
// STL 컨테이너들이란란 Containers are objects that store other objects.
// 클래스로 만든 객체,다른 오브젝트를 저장할 수 있는 오브젝트
// array<T,N>
// ------------------------------------------------------------

#include <iostream>
#include<vector>
#include<array>

#include "STRING.h"
#include "save.h"
using namespace std;

extern bool 관찰;           //관찰하고 싶으면 true 로

vector<int> v{ 1,2,3 };

//--------
int main()
//--------
{

	cout << "v의 크기 - " << sizeof v << endl;
	cout << "v의 주소 - " << addressof( v) << endl;
	cout << "v의 타입 - " << typeid(v).name() << endl;
	

	save("main.cpp");
	//save("STRING.cpp");
}

======================================
������ �ð�: 2025-04-15 ���� 4:54:29 ȭ����
======================================

﻿// ------------------------------------------------------------
//  - 4 / 15 -
// ------------------------------------------------------------
// 중간고사(30) 4/24 목
// 과제(30) 4/10 과제설명
// ------------------------------------------------------------
// class STRING - STL 정식 컨테이너처럼 동작하는 자료구조
// 
// STL 컨테이너들이란란 Containers are objects that store other objects.
// 클래스로 만든 객체,다른 오브젝트를 저장할 수 있는 오브젝트
// array<T,N>
// ------------------------------------------------------------

#include <iostream>
#include<vector>
#include<array>

#include "STRING.h"
#include "save.h"
using namespace std;

extern bool 관찰;           //관찰하고 싶으면 true 로

vector<int> v{ 1,2,3 };

//--------
int main()
//--------
{

	vector<int>* v = new vector<int>{ 1,2,3 };
	cout << "v의 크기 - " << sizeof *v << endl;
	cout << "v의 주소 - " << addressof( *v) << endl;
	cout << "v의 타입 - " << typeid(*v).name() << endl;
	

	save("main.cpp");
	//save("STRING.cpp");
}

======================================
������ �ð�: 2025-04-15 ���� 4:56:33 ȭ����
======================================

﻿// ------------------------------------------------------------
//  - 4 / 15 -
// ------------------------------------------------------------
// 중간고사(30) 4/24 목
// 과제(30) 4/10 과제설명
// ------------------------------------------------------------
// class STRING - STL 정식 컨테이너처럼 동작하는 자료구조
// 
// STL 컨테이너들이란란 Containers are objects that store other objects.
// 클래스로 만든 객체,다른 오브젝트를 저장할 수 있는 오브젝트
// array<T,N>
// ------------------------------------------------------------

#include <iostream>
#include<vector>
#include<array>

#include "STRING.h"
#include "save.h"
using namespace std;

extern bool 관찰;           //관찰하고 싶으면 true 로

vector<int> v{ 1,2,3 };

//--------
int main()
//--------
{

	/*vector<int>* v = new vector<int>{ 1,2,3 };
	cout << "v의 크기 - " << sizeof *v << endl;
	cout << "v의 주소 - " << addressof( *v) << endl;
	cout << "v의 타입 - " << typeid(*v).name() << endl;*/

	vector<int> v { 1, 2, 3 };

	v.push_back(4);

	for (int num : v) {
		cout << num << endl;
	}
	

	save("main.cpp");
	//save("STRING.cpp");
}

======================================
������ �ð�: 2025-04-15 ���� 4:56:36 ȭ����
======================================

﻿// ------------------------------------------------------------
//  - 4 / 15 -
// ------------------------------------------------------------
// 중간고사(30) 4/24 목
// 과제(30) 4/10 과제설명
// ------------------------------------------------------------
// class STRING - STL 정식 컨테이너처럼 동작하는 자료구조
// 
// STL 컨테이너들이란란 Containers are objects that store other objects.
// 클래스로 만든 객체,다른 오브젝트를 저장할 수 있는 오브젝트
// array<T,N>
// ------------------------------------------------------------

#include <iostream>
#include<vector>
#include<array>

#include "STRING.h"
#include "save.h"
using namespace std;

extern bool 관찰;           //관찰하고 싶으면 true 로

vector<int> v{ 1,2,3 };

//--------
int main()
//--------
{

	/*vector<int>* v = new vector<int>{ 1,2,3 };
	cout << "v의 크기 - " << sizeof *v << endl;
	cout << "v의 주소 - " << addressof( *v) << endl;
	cout << "v의 타입 - " << typeid(*v).name() << endl;*/

	vector<int> v { 1, 2, 3 };

	v.push_back(4);

	for (int num : v) {
		cout << num << endl;
	}
	

	save("main.cpp");
	//save("STRING.cpp");
}

======================================
Save Time: 04/17/25 10:53:29 Thursday
======================================

﻿// ------------------------------------------------------------
//  - 4 / 17 -
// ------------------------------------------------------------
// 중간고사(30) 4/24 목
// 과제(30) 4/10 과제설명
// ------------------------------------------------------------
// class STRING - STL 정식 컨테이너처럼 동작하는 자료구조
// 
// STL 컨테이너들이란란 Containers are objects that store other objects.
// 클래스로 만든 객체,다른 오브젝트를 저장할 수 있는 오브젝트
// array<T,N>
// ------------------------------------------------------------

#include <iostream>
#include<vector>

#include "STRING.h"
#include "save.h"
using namespace std;

extern bool 관찰;           //관찰하고 싶으면 true 로

//벡터가 어떻게 free-store 메모리를 관리하는지  알아본다 
//--------
int main()
//--------
{
	
	vector<int> v;

	cout << "현재 원소의 갯수-" << v.size() << endl;
	cout << "재할당 없이 저장할 수 있는 원소의 갯수-" << v.capacity() << endl;
	cout << "벡터가 관리하는 메모리의 시작번지-" << v.data() << endl;

	v.push_back(1);
	cout << "현재 원소의 갯수-" << v.size() << endl;
	cout << "재할당 없이 저장할 수 있는 원소의 갯수-" << v.capacity() << endl;
	cout << "벡터가 관리하는 메모리의 시작번지-" << v.data() << endl;

	save("main.cpp");
}

======================================
Save Time: 04/17/25 10:56:09 Thursday
======================================

﻿// ------------------------------------------------------------
//  - 4 / 17 -
// ------------------------------------------------------------
// 중간고사(30) 4/24 목
// 과제(30) 4/10 과제설명
// ------------------------------------------------------------
// class STRING - STL 정식 컨테이너처럼 동작하는 자료구조
// 
// STL 컨테이너들이란란 Containers are objects that store other objects.
// 클래스로 만든 객체,다른 오브젝트를 저장할 수 있는 오브젝트
// array<T,N>
// ------------------------------------------------------------

#include <iostream>
#include<vector>

#include "STRING.h"
#include "save.h"
using namespace std;

extern bool 관찰;           //관찰하고 싶으면 true 로

//벡터가 어떻게 free-store 메모리를 관리하는지  알아본다 
//--------
int main()
//--------
{
	
	vector<int> v;

	for(int i=0;i<10;++i){
		cout << "현재 원소의 갯수-" << v.size() << endl;
		cout << "재할당 없이 저장할 수 있는 원소의 갯수-" << v.capacity() << endl;
		cout << "벡터가 관리하는 메모리의 시작번지-" << v.data() << endl;

		v.push_back(i+1);
		cout << endl;
	}
	cout << "현재 원소의 갯수-" << v.size() << endl;
	cout << "재할당 없이 저장할 수 있는 원소의 갯수-" << v.capacity() << endl;
	cout << "벡터가 관리하는 메모리의 시작번지-" << v.data() << endl;

	save("main.cpp");
}

======================================
Save Time: 04/17/25 11:05:16 Thursday
======================================

﻿// ------------------------------------------------------------
//  - 4 / 17 -
// ------------------------------------------------------------
// 중간고사(30) 4/24 목
// 과제(30) 4/10 과제설명
// ------------------------------------------------------------
// class STRING - STL 정식 컨테이너처럼 동작하는 자료구조
// 
// STL 컨테이너들이란란 Containers are objects that store other objects.
// 클래스로 만든 객체,다른 오브젝트를 저장할 수 있는 오브젝트
// array<T,N>
// ------------------------------------------------------------

#include <iostream>
#include<vector>

#include "STRING.h"
#include "save.h"
using namespace std;

extern bool 관찰;           //관찰하고 싶으면 true 로

//벡터가 어떻게 free-store 메모리를 관리하는지  알아본다 
//--------
int main()
//--------
{
	vector<int> v;
	size_t old = v.capacity();
	// vs 의 벡터는ㄴ 메모리의 크기를 어떻게 바꾸나
	for(int i=0;i<1000;++i){
		if (v.capacity() != old) {
			cout << "---------------------------" << endl;
			cout << "이전 크기" << old << endl;
			cout << "새로 할당받은 크기" << v.capacity();
			old = v.capacity();
			cout << endl;
		}
		v.push_back(1);
	}
	save("main.cpp");
}

======================================
Save Time: 04/17/25 11:34:48 Thursday
======================================

﻿// ------------------------------------------------------------
//  - 4 / 17 -
// ------------------------------------------------------------
// 중간고사(30) 4/24 목
// 과제(30) 4/10 과제설명
// ------------------------------------------------------------
// class STRING - STL 정식 컨테이너처럼 동작하는 자료구조
// 
// STL 컨테이너들이란란 Containers are objects that store other objects.
// 클래스로 만든 객체,다른 오브젝트를 저장할 수 있는 오브젝트
// array<T,N>
// ------------------------------------------------------------

#include <iostream>
#include<vector>

#include "STRING.h"
#include "save.h"
using namespace std;

extern bool 관찰;           //관찰하고 싶으면 true 로

//벡터가 어떻게 free-store 메모리를 관리하는지  알아본다 
//--------
int main()
//--------
{
	관찰 = 1;
	vector<STRING> v;
	
	cout << "size - " << v.size() << endl;
	cout << "capacity - " << v.capacity() << endl;
	cout << "data - " << (void*)&v[0] << endl;
	v.push_back("123");
	cout << "원소 추가 후" << endl;
	cout << "size - " << v.size() << endl;
	cout << "capacity - " << v.capacity() << endl;
	cout << "data - " << (void*)&v[0] << endl;
	관찰 = 0;
	
	save("main.cpp");
}

======================================
Save Time: 04/17/25 11:43:10 Thursday
======================================

﻿// ------------------------------------------------------------
//  - 4 / 17 -
// ------------------------------------------------------------
// 중간고사(30) 4/24 목
// 과제(30) 4/10 과제설명
// ------------------------------------------------------------
// class STRING - STL 정식 컨테이너처럼 동작하는 자료구조
// 
// STL 컨테이너들이란란 Containers are objects that store other objects.
// 클래스로 만든 객체,다른 오브젝트를 저장할 수 있는 오브젝트
// array<T,N>
// ------------------------------------------------------------

#include <iostream>
#include<vector>

#include "STRING.h"
#include "save.h"
using namespace std;

extern bool 관찰;           //관찰하고 싶으면 true 로

//벡터가 어떻게 free-store 메모리를 관리하는지  알아본다 
//--------
int main()
//--------
{
	관찰 = 1;
	vector<STRING> v;
	
	for (int i = 0; i < 1000; ++i) {
		cout << "size - " << v.size() << endl;
		cout << "capacity - " << v.capacity() << endl;
		cout << "data - " << (void*)&v[0] << endl;
		v.push_back("1");
		cout << "원소 추가 후" << endl;
		cout << "size - " << v.size() << endl;
		cout << "capacity - " << v.capacity() << endl;
		cout << "data - " << (void*)&v[0] << endl;
	}
	관찰 = 0;
	
	save("main.cpp");
}

======================================
Save Time: 04/17/25 11:59:13 Thursday
======================================

﻿// ------------------------------------------------------------
//  - 4 / 17 -
// ------------------------------------------------------------
// 중간고사(30) 4/24 목
// 과제(30) 4/10 과제설명
// ------------------------------------------------------------
// class STRING - STL 정식 컨테이너처럼 동작하는 자료구조
// 
// STL 컨테이너들이란란 Containers are objects that store other objects.
// 클래스로 만든 객체,다른 오브젝트를 저장할 수 있는 오브젝트
// array<T,N>
// ------------------------------------------------------------

#include <iostream>
#include<vector>

#include "STRING.h"
#include "save.h"
using namespace std;

extern bool 관찰;           //관찰하고 싶으면 true 로

//벡터가 어떻게 free-store 메모리를 관리하는지  알아본다 
//--------
int main()
//--------
{
	관찰 = 1;
	vector<STRING> v;
	v.emplace_back("1"); //벡터에서 자체적으로 생성
		
	관찰 = 0;
	
	save("main.cpp");
}

======================================
Save Time: 04/17/25 12:00:08 Thursday
======================================

﻿// ------------------------------------------------------------
//  - 4 / 17 -
// ------------------------------------------------------------
// 중간고사(30) 4/24 목
// 과제(30) 4/10 과제설명
// ------------------------------------------------------------
// class STRING - STL 정식 컨테이너처럼 동작하는 자료구조
// 
// STL 컨테이너들이란란 Containers are objects that store other objects.
// 클래스로 만든 객체,다른 오브젝트를 저장할 수 있는 오브젝트
// array<T,N>
// ------------------------------------------------------------

#include <iostream>
#include<vector>

#include "STRING.h"
#include "save.h"
using namespace std;

extern bool 관찰;           //관찰하고 싶으면 true 로

//벡터가 어떻게 free-store 메모리를 관리하는지  알아본다 
//--------
int main()
//--------
{
	관찰 = 1;
	vector<STRING> v;
	v.emplace_back("1"); //벡터에서 자체적으로 생성
	v.emplace_back(STRING{"123"}); //이렇게 쓰지 마라
		
	관찰 = 0;
	
	save("main.cpp");
}