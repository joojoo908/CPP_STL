

======================================
저장한 시간: 2025-03-13 오전 10:56:07 목요일
======================================

//  - 3 / 11 -
//
// ------------------------------------------------------------------
// 많은 개수의 자료를 처리
// ------------------------------------------------------------------

#include <iostream>
#include<algorithm>
#include "save.h"
#include <random>
#include<print>

using namespace std;  //기본적으로 하지 말 것, 팀원들과 상의 하에 사용

// 문제: 랜덤 int 값 1000개를 화면에 출력하라  / 출력 데이터는 8칸에 맞춰서
// 

default_random_engine dre{}; // andom_device{}() 생성 후 호출
//mt19937_64 dre{random_device{}()};  //  랜덤한 값 뽑아내기 //{초기값 사용 }
uniform_int_distribution uid{0, 999'9999}; // 게임에서 사용할 일 없음 / 모든 수가 균일하게 나오도록 세팅 //다른 분포를 가지도록 하는것도 가능  //엔진의 결과를 특정한 분포로 가공

//--------
int main()
//--------
{
	// rand()  //0~32768  //과거의 랜덤
	//print("{:>80}", uid(dre)); //출력 하겠다   정력기호 <(왼쪽정렬) ^(캐럿:가운데 정렬) >

	for (int i = 0; i < 1000; ++i)
		print("{:8}", uid(dre));
	cout << endl;

	save("main.cpp");
}

======================================
저장한 시간: 2025-03-13 오전 11:08:27 목요일
======================================

//  - 3 / 11 -
//
// ------------------------------------------------------------------
// 많은 개수의 자료를 처리
// ------------------------------------------------------------------

#include <iostream>
#include<algorithm>
#include "save.h"
#include <random>
#include<print>

using namespace std;  //기본적으로 하지 말 것, 팀원들과 상의 하에 사용

// 문제: 랜덤 int 값 1000개를 메모리에 저장하라  / 출력 데이터는 8칸에 맞춰서
// 저장된 값 중에서 가장 큰 값을 화면에 출력하라

default_random_engine dre{}; // andom_device{}() 생성 후 호출
//mt19937_64 dre{random_device{}()};  //  랜덤한 값 뽑아내기 //{초기값 사용 }
uniform_int_distribution uid{0, 999'9999}; // 게임에서 사용할 일 없음 / 모든 수가 균일하게 나오도록 세팅 //다른 분포를 가지도록 하는것도 가능  //엔진의 결과를 특정한 분포로 가공

//--------
int main()
//--------
{
	// rand()  //0~32768  //과거의 랜덤
	//print("{:>80}", uid(dre)); //출력 하겠다   정력기호 <(왼쪽정렬) ^(캐럿:가운데 정렬) >

	vector<int> numbers;
	for (int i = 0; i < 1000; ++i) {
		numbers.push_back(uid(dre));
	}
	cout << endl;
	cout << *max_element(numbers.begin(), numbers.end()) << endl;

	save("main.cpp");
}

======================================
저장한 시간: 2025-03-13 오전 11:17:54 목요일
======================================

//  - 3 / 11 -
//
// ------------------------------------------------------------------
// 많은 개수의 자료를 처리
// ------------------------------------------------------------------

#include <iostream>
#include<algorithm>
#include "save.h"
#include <random>
#include<print>
#include <array> //stl 시퀸스 드라이버 중 하나

using namespace std;  //기본적으로 하지 말 것, 팀원들과 상의 하에 사용

// 문제: 랜덤 int 값 1000개를 메모리에 저장하라  / 출력 데이터는 8칸에 맞춰서
// 저장된 값 중에서 가장 큰 값을 화면에 출력하라

default_random_engine dre{}; // andom_device{}() 생성 후 호출
//mt19937_64 dre{random_device{}()};  //  랜덤한 값 뽑아내기 //{초기값 사용 }
uniform_int_distribution uid{0, 999'9999}; // 게임에서 사용할 일 없음 / 모든 수가 균일하게 나오도록 세팅 //다른 분포를 가지도록 하는것도 가능  //엔진의 결과를 특정한 분포로 가공

//--------
int main()
//--------
{
	// rand()  //0~32768  //과거의 랜덤
	//print("{:>80}", uid(dre)); //출력 하겠다   정력기호 <(왼쪽정렬) ^(캐럿:가운데 정렬) >


	// 안전배열이 나오게 된 이유
	array<int, 1000> a; // int a[1000] 보다 훨신 났다.

	vector<int> numbers;
	for (int i = 0; i < 1000; ++i) {
		a[i] = uid(dre);
		//numbers.push_back(uid(dre));
	}
	//-----------------------------------------
	//헛짓거리
	int max_value = numeric_limits<int>::min();
	for (int num : numbers) {
		if (max_value < num)
			max_value = num;
	}
	cout << max_value << endl;
	//-----------------------------------------
	cout << endl;
	//cout << *max_element(numbers.begin(), numbers.end()) << endl;
	cout << *max_element(a.begin(), a.end()) << endl;

	save("main.cpp");
}

======================================
저장한 시간: 2025-03-13 오전 11:55:39 목요일
======================================

//  - 3 / 11 -
//
// ------------------------------------------------------------------
// 많은 개수의 자료를 처리 -file에 저장하고 읽어오기
// ------------------------------------------------------------------

#include <iostream>
#include<algorithm>  //여기있는 기능을 코딩하면 안된다
#include "save.h"
#include <random>
#include<print>
#include <array> //stl 시퀸스 드라이버 중 하나

#include<fstream>
//#include<string>

using namespace std;  //기본적으로 하지 말 것, 팀원들과 상의 하에 사용

// 문제: 랜덤 int 값 1000개를 메모리에 저장하라  / 출력 데이터는 8칸에 맞춰서
// 저장된 값 중에서 가장 큰 값을 화면에 출력하라

default_random_engine dre{}; // andom_device{}() 생성 후 호출
//mt19937_64 dre{random_device{}()};  //  랜덤한 값 뽑아내기 //{초기값 사용 }
uniform_int_distribution uid{0, 999'9999}; // 게임에서 사용할 일 없음 / 모든 수가 균일하게 나오도록 세팅 //다른 분포를 가지도록 하는것도 가능  //엔진의 결과를 특정한 분포로 가공

//--------
int main()
//--------
{
	// 안전배열이 나오게 된 이유
	array<int, 1000> a; // int a[1000] 보다 훨신 났다.

	vector<int> numbers;
	for (int i = 0; i < 1000; ++i) {
		a[i] = uid(dre);
		//numbers.push_back(uid(dre));
	}
	
	cout << endl;
	
	cout << *max_element(a.begin(), a.end()) << endl;

	//문제 : a에 있는 값을 "int 1000개.txt"에 화면 출력한 것과 같이, 파일을 열었을 때 int 값을 사람이 읽을 수 있도록 저장하라


	std::string WriteFile{ "int 1000개.txt" };
	ofstream out{ "int 1000개.txt" }; // RAII /완전 자동화(out.close() 사용x)
	// - 딜리미터(구분자)

	int i = 0;
	for (int num : a) {
		print(out, "{:8}", num);
		//out << num << " ";
	}

	save("main.cpp");
}

======================================
저장한 시간: 2025-03-13 오후 12:02:45 목요일
======================================

//  - 3 / 11 -
//
// ------------------------------------------------------------------
// 많은 개수의 자료를 처리 -file에 저장하고 읽어오기
// ------------------------------------------------------------------

#include <iostream>
#include<algorithm>  //여기있는 기능을 코딩하면 안된다
#include "save.h"
#include <random>
#include<print>
#include <array> //stl 시퀸스 드라이버 중 하나

#include<fstream>
//#include<string>

using namespace std;  //기본적으로 하지 말 것, 팀원들과 상의 하에 사용

// 문제: "int 1000개.txt" 에는 int 값 1000개가 저장되어 있다
// 값을 읽어 화면에 출력하라

default_random_engine dre{}; // andom_device{}() 생성 후 호출
uniform_int_distribution uid{0, 999'9999}; // 게임에서 사용할 일 없음 / 모든 수가 균일하게 나오도록 세팅 //다른 분포를 가지도록 하는것도 가능  //엔진의 결과를 특정한 분포로 가공

//--------
int main()
//--------
{
	// 안전배열이 나오게 된 이유
	array<int, 1000> a; // int a[1000] 보다 훨신 났다.
	vector<int> v;

	ifstream in{ "int 1000개.txt" };
	if (not in) {
		std::cout << "int 1000개.txt" << "을 열 수 없습니다" << std::endl;
		exit(2025);
	}

	int i = 0;
	while (in) {
		
		in >>a[i];
		++i;
	}

	for (int num : a) {
		print("{:8}", num);
	}

	save("main.cpp");
}

======================================
저장한 시간: 2025-03-13 오후 12:04:39 목요일
======================================

//  - 3 / 11 -
//
// ------------------------------------------------------------------
// 많은 개수의 자료를 처리 -file에 저장하고 읽어오기
// ------------------------------------------------------------------

#include <iostream>
#include<algorithm>  //여기있는 기능을 코딩하면 안된다
#include "save.h"
#include <random>
#include<print>
#include <array> //stl 시퀸스 드라이버 중 하나

#include<fstream>
//#include<string>

using namespace std;  //기본적으로 하지 말 것, 팀원들과 상의 하에 사용

// 문제: "int 1000개.txt" 에는 int 값 1000개가 저장되어 있다
// 값을 읽어 화면에 출력하라

default_random_engine dre{}; // andom_device{}() 생성 후 호출
uniform_int_distribution uid{0, 999'9999}; // 게임에서 사용할 일 없음 / 모든 수가 균일하게 나오도록 세팅 //다른 분포를 가지도록 하는것도 가능  //엔진의 결과를 특정한 분포로 가공

//--------
int main()
//--------
{
	// 안전배열이 나오게 된 이유
	array<int, 1000> a; // int a[1000] 보다 훨신 났다.
	vector<int> v;

	ifstream in{ "int 1000개.txt" };
	if (not in) {
		std::cout << "int 1000개.txt" << "을 열 수 없습니다" << std::endl;
		exit(2025);
	}

	int i = 0;
	while (in >> i) print("{:8}", i);

	save("main.cpp");
}

======================================
저장한 시간: 2025-03-13 오후 12:06:07 목요일
======================================

//  - 3 / 11 -
//
// ------------------------------------------------------------------
// 많은 개수의 자료를 처리 -file에 저장하고 읽어오기
// ------------------------------------------------------------------

#include <iostream>
#include<algorithm>  //여기있는 기능을 코딩하면 안된다
#include "save.h"
#include <random>
#include<print>
#include <array> //stl 시퀸스 드라이버 중 하나

#include<fstream>
//#include<string>

using namespace std;  //기본적으로 하지 말 것, 팀원들과 상의 하에 사용

// 문제: "int 1000개.txt" 에는 int 값 1000개가 저장되어 있다
// 값을 읽어 화면에 출력하라

default_random_engine dre{}; // andom_device{}() 생성 후 호출
uniform_int_distribution uid{0, 999'9999}; // 게임에서 사용할 일 없음 / 모든 수가 균일하게 나오도록 세팅 //다른 분포를 가지도록 하는것도 가능  //엔진의 결과를 특정한 분포로 가공

//--------
int main()
//--------
{
	// 안전배열이 나오게 된 이유
	array<int, 1000> a; // int a[1000] 보다 훨신 났다.
	vector<int> v;

	ifstream in{ "int 1000개.txt" };
	if (not in) {
		std::cout << "int 1000개.txt" << "을 열 수 없습니다" << std::endl;
		exit(2025);
	}

	int num;
	int i{};
	while (in >> num) { 
		print("{:8}", num); 
		++i;
	}
	cout << endl;
	cout << i << endl;
	save("main.cpp");
}

======================================
저장한 시간: 2025-03-13 오후 12:08:14 목요일
======================================

//  - 3 / 11 -
//
// ------------------------------------------------------------------
// 많은 개수의 자료를 처리 -file에 저장하고 읽어오기
// ------------------------------------------------------------------

#include <iostream>
#include<algorithm>  //여기있는 기능을 코딩하면 안된다
#include "save.h"
#include <random>
#include<print>
#include <array> //stl 시퀸스 드라이버 중 하나

#include<fstream>
//#include<string>

using namespace std;  //기본적으로 하지 말 것, 팀원들과 상의 하에 사용

// 문제: "int 1000개.txt" 에는 int 값 1000개가 저장되어 있다
// 가장 큰 값을찾아라

default_random_engine dre{}; // andom_device{}() 생성 후 호출
uniform_int_distribution uid{0, 999'9999}; // 게임에서 사용할 일 없음 / 모든 수가 균일하게 나오도록 세팅 //다른 분포를 가지도록 하는것도 가능  //엔진의 결과를 특정한 분포로 가공

//--------
int main()
//--------
{
	// 안전배열이 나오게 된 이유
	array<int, 1000> a; // int a[1000] 보다 훨신 났다.
	vector<int> v;

	ifstream in{ "int 1000개.txt" };
	if (not in) {
		std::cout << "int 1000개.txt" << "을 열 수 없습니다" << std::endl;
		exit(2025);
	}

	int num;
	int i{};
	int maxValue{ numeric_limits<int>::min() };
	while (in >> num) { 
		print("{:8}", num); 
		if (maxValue < num) maxValue = num;
		++i;
	}
	cout << endl;
	cout << maxValue << endl;
	save("main.cpp");
}