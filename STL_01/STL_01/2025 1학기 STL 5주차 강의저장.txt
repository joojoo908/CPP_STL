

======================================
저장한 시간: 2025-04-01 오후 3:37:43 화요일
======================================

// ------------------------------------------------------------
//  - 4 / 1 -
// ------------------------------------------------------------
// 중간고사 4/24 목
// 과제 4/10 과제설명
// ---------------------------------------
// callable types - 호출 가능한 타입
// 1. 함수
// 2. 함수 포인터
// 3. 람다 - 이름없는 함수 (프로그래머가 부를 일이 없기때문에 이름이 없다)
// ------------------------------------------------------------

#include <iostream>

#include "save.h"
using namespace std;

//--------
int main()
//--------
{

	[]() {
		cout << "hello i'm ramda" << endl;
		};//가장 간단한 람다


	save("main.cpp");
	
	
}

======================================
저장한 시간: 2025-04-01 오후 3:40:05 화요일
======================================

// ------------------------------------------------------------
//  - 4 / 1 -
// ------------------------------------------------------------
// 중간고사 4/24 목
// 과제 4/10 과제설명
// ---------------------------------------
// callable types - 호출 가능한 타입
// 1. 함수
// 2. 함수 포인터
// 3. 람다 - 이름없는 함수 (프로그래머가 부를 일이 없기때문에 이름이 없다)
// ------------------------------------------------------------

#include <iostream>

#include "save.h"
using namespace std;

//--------
int main()
//--------
{

	[]() {
		cout << "hello i'm ramda" << endl;
		} /*여기까지가 람다*/ ();//람다 호출


	save("main.cpp");
	
	
}

======================================
저장한 시간: 2025-04-01 오후 3:42:23 화요일
======================================

// ------------------------------------------------------------
//  - 4 / 1 -
// ------------------------------------------------------------
// 중간고사 4/24 목
// 과제 4/10 과제설명
// ---------------------------------------
// callable types - 호출 가능한 타입
// 1. 함수
// 2. 함수 포인터
// 3. 람다 - 이름없는 함수 (프로그래머가 부를 일이 없기때문에 이름이 없다)
// ------------------------------------------------------------

#include <iostream>

#include "save.h"
using namespace std;

//--------
int main()
//--------
{

	cout << sizeof([]() {
		cout << "hello i'm ramda" << endl;
		}) << endl;



	save("main.cpp");
	
	
}

======================================
저장한 시간: 2025-04-01 오후 3:43:09 화요일
======================================

// ------------------------------------------------------------
//  - 4 / 1 -
// ------------------------------------------------------------
// 중간고사 4/24 목
// 과제 4/10 과제설명
// ---------------------------------------
// callable types - 호출 가능한 타입
// 1. 함수
// 2. 함수 포인터
// 3. 람다 - 이름없는 함수 (프로그래머가 부를 일이 없기때문에 이름이 없다)
// ------------------------------------------------------------

#include <iostream>

#include "save.h"
using namespace std;

//--------
int main()
//--------
{

	cout << typeid( []() {
		cout << "hello i'm ramda" << endl;
		} ).name() << endl;



	save("main.cpp");
	
	
}

======================================
저장한 시간: 2025-04-01 오후 3:47:03 화요일
======================================

// ------------------------------------------------------------
//  - 4 / 1 -
// ------------------------------------------------------------
// 중간고사 4/24 목
// 과제 4/10 과제설명
// ---------------------------------------
// callable types - 호출 가능한 타입
// 1. 함수
// 2. 함수 포인터
// 3. 람다 - 이름없는 함수 (프로그래머가 부를 일이 없기때문에 이름이 없다)
// ------------------------------------------------------------

#include <iostream>

#include "save.h"
using namespace std;

//--------
int main()
//--------
{

	auto p = []() {
		cout << "hello i'm ramda" << endl;
		};

	cout << addressof(p) << endl;

	save("main.cpp");
	
	
}

======================================
저장한 시간: 2025-04-01 오후 4:03:21 화요일
======================================

// ------------------------------------------------------------
//  - 4 / 1 -
// ------------------------------------------------------------
// 중간고사 4/24 목
// 과제 4/10 과제설명
// ---------------------------------------
// callable types - 호출 가능한 타입
// 1. 함수
// 2. 함수 포인터
// 3. 람다 - 이름없는 함수 (프로그래머가 부를 일이 없기때문에 이름이 없다)
// ------------------------------------------------------------

#include <iostream>

#include "save.h"
using namespace std;

//--------
int main()
//--------
{
	class 람다 {
	public:
		void operator()() { cout << "난 람다야" << endl; };
	};

	람다 a{};

	a();

	save("main.cpp");
	
	
}

======================================
저장한 시간: 2025-04-01 오후 4:04:48 화요일
======================================

// ------------------------------------------------------------
//  - 4 / 1 -
// ------------------------------------------------------------
// 중간고사 4/24 목
// 과제 4/10 과제설명
// ---------------------------------------
// callable types - 호출 가능한 타입
// 1. 함수
// 2. 함수 포인터
// 3. 람다 - 이름없는 함수 (프로그래머가 부를 일이 없기때문에 이름이 없다)
// ------------------------------------------------------------

#include <iostream>

#include "save.h"
using namespace std;

//--------
int main()
//--------
{
	class 람다 {
	public:
		void operator()() { cout << "난 람다야" << endl; };
	};

	람다 a{};

	a();

	cout << typeid(a).name() << endl;

	save("main.cpp");
	
	
}

======================================
저장한 시간: 2025-04-01 오후 4:05:50 화요일
======================================

// ------------------------------------------------------------
//  - 4 / 1 -
// ------------------------------------------------------------
// 중간고사 4/24 목
// 과제 4/10 과제설명
// ---------------------------------------
// callable types - 호출 가능한 타입
// 1. 함수
// 2. 함수 포인터
// 3. 람다 - 이름없는 함수 (프로그래머가 부를 일이 없기때문에 이름이 없다)
// ------------------------------------------------------------

#include <iostream>

#include "save.h"
using namespace std;

class 람다 {
public:
	void operator()() { cout << "난 람다야" << endl; };
};

//--------
int main()
//--------
{
	

	람다 a{};

	a();

	cout << typeid(a).name() << endl;

	save("main.cpp");
	
	
}

======================================
저장한 시간: 2025-04-01 오후 4:09:08 화요일
======================================

// ------------------------------------------------------------
//  - 4 / 1 -
// ------------------------------------------------------------
// 중간고사 4/24 목
// 과제 4/10 과제설명
// ---------------------------------------
// callable types - 호출 가능한 타입
// 1. 함수
// 2. 함수 포인터
// 3. 람다 - 이름없는 함수 (프로그래머가 부를 일이 없기때문에 이름이 없다)
// ------------------------------------------------------------

#include <iostream>

#include "save.h"
using namespace std;

//--------
int main()
//--------
{
	class Dog {
	public:
		void operator()() {
			cout << "멍멍" << endl;
		}

	};
	
	Dog dog;

	dog();//dog.operator()();

	save("main.cpp");
	
	
}

======================================
저장한 시간: 2025-04-01 오후 4:12:08 화요일
======================================

// ------------------------------------------------------------
//  - 4 / 1 -
// ------------------------------------------------------------
// 중간고사 4/24 목
// 과제 4/10 과제설명
// ---------------------------------------
// callable types - 호출 가능한 타입
// 1. 함수
// 2. 함수 포인터
// 3. 람다 - 이름없는 함수 (프로그래머가 부를 일이 없기때문에 이름이 없다)
// 4. 함수 객체 - 함수호출연산자를 오버로딩한 클래스로 만든 객체(function object)
// ------------------------------------------------------------

#include <iostream>

#include "save.h"
using namespace std;

void f() {
	class Dog {
	public:
		void operator()() {
			cout << "멍멍" << endl;
		}

	};

	Dog dog;

	dog();//dog.operator()();

	cout << typeid(dog).name() << endl;
}

//--------
int main()
//--------
{
	f();


	save("main.cpp");
	
	
}

======================================
저장한 시간: 2025-04-01 오후 4:19:01 화요일
======================================

// ------------------------------------------------------------
//  - 4 / 1 -
// ------------------------------------------------------------
// 중간고사 4/24 목
// 과제 4/10 과제설명
// ---------------------------------------
// callable types - 호출 가능한 타입
// 1. 함수
// 2. 함수 포인터
// 3. 람다 - 이름없는 함수 (프로그래머가 부를 일이 없기때문에 이름이 없다)
// 4. 함수 객체 - 함수호출연산자를 오버로딩한 클래스로 만든 객체(function object)
// 5. 멤버함수 
// ------------------------------------------------------------

#include <iostream>

#include "save.h"
using namespace std;

//--------
int main()
//--------
{
	void f();
	void g(int);


	//(int(*)())   f;
	//(int(*)(int))g;

	save("main.cpp");
}

======================================
저장한 시간: 2025-04-01 오후 4:26:15 화요일
======================================

// ------------------------------------------------------------
//  - 4 / 1 -
// ------------------------------------------------------------
// 중간고사 4/24 목
// 과제 4/10 과제설명
// ---------------------------------------
// callable types - 호출 가능한 타입  --> 모든 호출 가능 타입을 나타낼 수 있는 function 
// 1. 함수
// 2. 함수 포인터
// 3. 람다 - 이름없는 함수 (프로그래머가 부를 일이 없기때문에 이름이 없다)
// 4. 함수 객체 - 함수호출연산자를 오버로딩한 클래스로 만든 객체(function object)
// 5. 멤버함수 
// ------------------------------------------------------------

#include <iostream>
#include <functional>

#include "save.h"
using namespace std;

//--------
int main()
//--------
{
	void f();
	void g(int);

	//function<void()> a = f;
	//function<void(int)> b = g;

	save("main.cpp");
}

======================================
저장한 시간: 2025-04-01 오후 4:27:56 화요일
======================================

// ------------------------------------------------------------
//  - 4 / 1 -
// ------------------------------------------------------------
// 중간고사 4/24 목
// 과제 4/10 과제설명
// ---------------------------------------
// callable types - 호출 가능한 타입  --> 모든 호출 가능 타입을 나타낼 수 있는 function 
// 1. 함수
// 2. 함수 포인터
// 3. 람다 - 이름없는 함수 (프로그래머가 부를 일이 없기때문에 이름이 없다)
// 4. 함수 객체 - 함수호출연산자를 오버로딩한 클래스로 만든 객체(function object)
// 5. 멤버함수 
// ------------------------------------------------------------

#include <iostream>
#include <functional>

#include "save.h"
using namespace std;

void f() {};
void g(int) {};

//--------
int main()
//--------
{

	function<void()> a = f;
	function<void(int)> b = g;

	save("main.cpp");
}

======================================
저장한 시간: 2025-04-01 오후 4:41:58 화요일
======================================

// ------------------------------------------------------------
//  - 4 / 1 -
// ------------------------------------------------------------
// 중간고사 4/24 목
// 과제 4/10 과제설명
// ---------------------------------------
// callable types - 호출 가능한 타입  --> 모든 호출 가능 타입을 나타낼 수 있는 function 
// 1. 함수
// 2. 함수 포인터
// 3. 람다 - 이름없는 함수 (프로그래머가 부를 일이 없기때문에 이름이 없다)
// 4. 함수 객체 - 함수호출연산자를 오버로딩한 클래스로 만든 객체(function object)
// 5. 멤버함수 
// ------------------------------------------------------------

#include <iostream>
#include<algorithm>
#include <array>

#include "save.h"
using namespace std;

int Dog(int a, int b) {
	return a > b;
}

//--------
int main()
//--------
{
	array<int, 10> a{ 1,3,5,7,9,2,4,6,8,10 };

	//문제: 내림차순 정렬할 수 있게 하라
	sort(a.begin(), a.end(), Dog);

	for (int num : a) {
		cout << num << " ";
	}
	cout << endl;

	save("main.cpp");
}

======================================
저장한 시간: 2025-04-01 오후 4:47:06 화요일
======================================

// ------------------------------------------------------------
//  - 4 / 1 -
// ------------------------------------------------------------
// 중간고사 4/24 목
// 과제 4/10 과제설명
// ---------------------------------------
// callable types - 호출 가능한 타입  --> 모든 호출 가능 타입을 나타낼 수 있는 function 
// 1. 함수
// 2. 함수 포인터
// 3. 람다 - 이름없는 함수 (프로그래머가 부를 일이 없기때문에 이름이 없다)
// 4. 함수 객체 - 함수호출연산자를 오버로딩한 클래스로 만든 객체(function object)
// 5. 멤버함수 
// ------------------------------------------------------------

#include <iostream>
#include<algorithm>
#include<functional>
#include <array>

#include "save.h"
using namespace std;

//--------
int main()
//--------
{
	array<int, 10> a{ 1,3,5,7,9,2,4,6,8,10 };

	class X {
	public:
		bool operator()(int a, int b) {
			return a > b;
		}
	};

	function<bool(int, int)> Dog{X()};

	//문제: 내림차순 정렬할 수 있게 하라
	sort(a.begin(), a.end(), Dog);

	for (int num : a) {
		cout << num << " ";
	}
	cout << endl;

	save("main.cpp");
}

======================================
저장한 시간: 2025-04-01 오후 4:49:06 화요일
======================================

// ------------------------------------------------------------
//  - 4 / 1 -
// ------------------------------------------------------------
// 중간고사 4/24 목
// 과제 4/10 과제설명
// ---------------------------------------
// callable types - 호출 가능한 타입  --> 모든 호출 가능 타입을 나타낼 수 있는 function 
// 1. 함수
// 2. 함수 포인터
// 3. 람다 - 이름없는 함수 (프로그래머가 부를 일이 없기때문에 이름이 없다)
// 4. 함수 객체 - 함수호출연산자를 오버로딩한 클래스로 만든 객체(function object)
// 5. 멤버함수 
// ------------------------------------------------------------

#include <iostream>
#include<algorithm>
#include<functional>
#include <array>

#include "save.h"
using namespace std;

//--------
int main()
//--------
{
	array<int, 10> a{ 1,3,5,7,9,2,4,6,8,10 };

	class X {
	public:
		bool operator()(int a, int b) {
			return a > b;
		}
	};

	//function<bool(int, int)> Dog = X::operator();
	//function<bool(int, int)> Dog{X()};

	X Dog;
	//문제: 내림차순 정렬할 수 있게 하라
	sort(a.begin(), a.end(), Dog);

	for (int num : a) {
		cout << num << " ";
	}
	cout << endl;

	save("main.cpp");
}

======================================
저장한 시간: 2025-04-01 오후 5:08:36 화요일
======================================

// ------------------------------------------------------------
//  - 4 / 1 -
// ------------------------------------------------------------
// 중간고사 4/24 목
// 과제 4/10 과제설명
// ---------------------------------------
// callable types - 호출 가능한 타입  --> 모든 호출 가능 타입을 나타낼 수 있는 function 
// 1. 함수
// 2. 함수 포인터
// 3. 람다 - 이름없는 함수 (프로그래머가 부를 일이 없기때문에 이름이 없다)
// 4. 함수 객체 - 함수호출연산자를 오버로딩한 클래스로 만든 객체(function object)
// 5. 멤버함수 
// ------------------------------------------------------------

#include <iostream>
#include<algorithm>
#include<functional>
#include <array>
#include<random>
#include <print>
#include <fstream>

#include "save.h"
using namespace std;


default_random_engine dre;
uniform_int_distribution uid;
uniform_int_distribution uidLen{ 3,50 };
uniform_int_distribution<int> uidName{ 'a','z'};

class Dog {
public:
	Dog() {
		num = uid(dre);
		int len = uidLen(dre);
		for (int i = 0; i < len; ++i) {
			name += uidName(dre);
		}
	}

	void show() const{
		println("{:10} - {:}", num, name);
	}



private:
	string name;  //3~50글자 사이의 랜덤 소문자
	int num;   // 랜덤 int 값

	friend ostream& operator<< (ostream& os, const Dog& dog) {
		return os << dog.num << " " << dog.name << " ";
	}
};

// 상황: dog 객체 10만개를 파일 "Dog 십만마리" 에 기록하였다
// 파일은 다음과 같이 열었다.
// ofstream out("Dog 십만마리");
//각 dog 객체는
// out>>dog; 와 같이 기록하였다


//--------
int main()
//--------
{
	ofstream out("Dog 십만마리");

	for (int i = 0; i < 100000; ++i) {
		Dog dog;
		out << dog;
	}

	save("main.cpp");
}

======================================
저장한 시간: 2025-04-01 오후 11:55:12 화요일
======================================

// ------------------------------------------------------------
//  - 4 / 1 -
// ------------------------------------------------------------
// 중간고사 4/24 목
// 과제 4/10 과제설명
// ---------------------------------------
// callable types - 호출 가능한 타입  --> 모든 호출 가능 타입을 나타낼 수 있는 function 
// 1. 함수
// 2. 함수 포인터
// 3. 람다 - 이름없는 함수 (프로그래머가 부를 일이 없기때문에 이름이 없다)
// 4. 함수 객체 - 함수호출연산자를 오버로딩한 클래스로 만든 객체(function object)
// 5. 멤버함수 
// ------------------------------------------------------------

#include <iostream>
#include<algorithm>
#include <fstream>
#include <array>
#include <ranges>
#include <print>

#include "save.h"
using namespace std;

class Dog {
public:
	void show() {
		println("{:10} - {:8}", num, name);
	}

	bool operator<(const Dog& other) const {
		return (name.length() < other.name.length());
	}

private:
	string name;  //3~50글자 사이의 랜덤 소문자
	int num;   // 랜덤 int 값

	friend ostream& operator<< (ostream& os, const Dog& dog) {
		return os << dog.num << " " << dog.name << " ";
	}

	friend istream& operator>> (istream& os, Dog& dog) {
		os >> dog.num;
		os >> dog.name;
		return os ;
	}

};

// 상황: dog 객체 10만개를 파일 "Dog 십만마리" 에 기록하였다
// 파일은 다음과 같이 열었다.
// ofstream out("Dog 십만마리");
//각 dog 객체는
// out>>dog; 와 같이 기록하였다

//문제: 틀림없이 dog 객체 10만마리가 기록되었다
// 파일"Dog 십만마리"를 열어 모든 Dog 객체를 메모리에 저장하라
//제일 마지막 객체의 정보를 화면에 출력하고 답지에도 출력결과를 적어라
//메모리에 저장한 Dog 객체르 name길이 기준 오름차순으로 정렬하라
// 앞에서부터 5000개의 정보를 화면에 출력하라

array<Dog, 10'0000> a;

//--------
int main()
//--------
{
	ifstream in("Dog 십만마리");

	for (Dog & d :a) {
		in >> d;
	}

	sort(a.begin(), a.end(), [](Dog d1, Dog d2) { return d1 < d2; });

	for (Dog d : a | views::take(5000)) {
		d.show();
	}

	save("main.cpp");
}